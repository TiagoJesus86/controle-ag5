; Script generated by Caique Rodrigues.
; Inno Setup Compiler 5.4.3
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!
              
; Basic Defines - used in bellow iss-script
#define AppID          "{C7DC7D7F-321B-4B25-9F73-44F57F623930}"                                                                              
#define AppID_Demo     "{C7DC7D7F-321B-4B25-9F73-44F57F623931}"
#define AppID_Mono     "{C7DC7D7F-321B-4B25-9F73-44F57F623932}"               
#define AppID_Portable "{C7DC7D7F-321B-4B25-9F73-44F57F623933}"
#define AppID_Station  "{C7DC7D7F-321B-4B25-9F73-44F57F623934}"
#define AppID_Server   "{C7DC7D7F-321B-4B25-9F73-44F57F623935}"

#define AppName "ControleLeiteiro - Agenda"
#define InternalAppName "Agenda"
#define AppVersion "5.0"
;Aqui deve ser definido a nova versão do sistema
#define CurrentVersion "204"
#define AppPublisher "Caique Rodrigues"
#define AppURL "http://www.turbocode.com.br/"
#define AppExeName "CL.Ag5.exe"

; components                                        
#define COMP_ClientApp         "ClientApp"
#define COMP_Domain            "Domain"
#define COMP_RegFarm           "RegFarm"
#define COMP_Server32          "Server32"
#define COMP_Server64          "Server64"
#define COMP_SampleData        "SampleData"


; register edit sizes
#define RegisterCodeMaxSize "6"  
#define ActivateKeyMaxSize  "36"

; Folders type
#define FolderApp       "FolderApp"
#define FolderServer    "FolderServer"
#define FolderData      "FolderData"
#define FolderModels    "FolderModels"
#define FolderServerCfg "FolderServerCfg"

; config station file
#define ServerConfigFile "CLAG5Server.cfg"

; default firebird / controller values
;#define DEF_FBSource         "FBS252-26540"
;#define DEF_FBVERSION        "2.5.2.26540-0"
;#define DEF_FBSource         "FBS253-26778"
;#define DEF_FBVERSION        "2.5.3.26778-0"
;#define DEF_FBSource         "FBS\FBS255-26952"
;#define DEF_FBVERSION        "2.5.5-26952-0"
#define DEF_FBSource         "FBS\FBS257-27050"
#define DEF_FBVERSION        "2.5.7.27050-0"
#define DEF_FBServiceName32  "FBSC250w32CL"
#define DEF_FBServiceName64  "FBSC250x64CL"
#define DEF_FBPort32         "35251"
#define DEF_FBPort64         "65251"
#define DEF_FBController32   "35500"
#define DEF_FBController64   "65500" 

; previous constant 
#define PREV_InstallType    "InstallType"
#define PREV_UserName       "UserName"
#define PREV_CompanyName    "CompanyName"

//#define PREV_UserName       "UserName"
//#define PREV_CompanyName    "CompanyName"

#define PREV_InstallType    "InstallType"
#define PREV_FBServiceName  "FBServiceName"                                                                                                
#define PREV_FBPort         "FBPort"
#define PREV_FBController   "FBController"


[Setup]
; // Compiler-related
Compression=lzma2/ultra64
;CompressionThreads
;DiskClusterSize
;DiskSliceSize
;DiskSpanning
;Encryption
;InternalCompressLevel
;LZMAAlgorithm
;LZMABlockSize
;LZMADictionarySize=65536
;LZMAMatchFinder
;LZMANumBlockThreads
;LZMANumFastBytes
LZMAUseSeparateProcess=yes
;MergeDuplicateFiles
;OutputBaseFilename
OutputBaseFilename=ControleLeitieroSetup
OutputDir=..\Installer\
;OutputManifestFile
;ReserveBytes
;SignedUninstaller
;SignedUninstallerDir
;SignTool=agenda
SignTool=agenda5
;SlicesPerDisk
;SolidCompression
SolidCompression=yes
SourceDir= ..\Deploy
;TerminalServicesAware
;UseSetupLdr
;VersionInfoCompany
;VersionInfoCopyright
;VersionInfoDescription
;VersionInfoProductName
;VersionInfoProductTextVersion
;VersionInfoProductVersion
;VersionInfoTextVersion
;VersionInfoVersion

; // Installer-related
AllowCancelDuringInstall = no
;AllowNoIcons
;AllowRootDirectory
;AllowUNCPath
;AlwaysRestart
;AlwaysShowComponentsList
;AlwaysShowDirOnReadyPage
AlwaysShowDirOnReadyPage=yes
;AlwaysShowGroupOnReadyPage
;AlwaysUsePersonalGroup
;AppendDefaultDirName
;AppendDefaultGroupName
;AppComments
;AppContact
;AppId :  The value of AppId uniquely identifies this application.
;;        Do not use the same AppId value in installers for other applications.
;;        (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={code:GetAppID} 
;{#AppID}
;AppModifyPath
;AppMutex
;AppName (*)
AppName={#AppName}
;AppPublisher
AppPublisher={#AppPublisher}
;AppPublisherURL
AppPublisherURL={#AppURL}
;AppSupportPhone
;AppSupportURL
AppSupportURL={#AppURL}
;AppReadmeFile
;AppUpdatesURL
AppUpdatesURL={#AppURL}
;AppVerName
AppVerName={#AppName} {#AppVersion}
;AppVersion (*)
AppVersion={#AppVersion}
;ArchitecturesAllowed
;ArchitecturesInstallIn64BitMode
ArchitecturesInstallIn64BitMode=x64
;ChangesAssociations
;ChangesEnvironment
;CreateAppDir
CreateUninstallRegKey=GetCreateUninstallRegKey
;DefaultDialogFontName
;DefaultDirName
DefaultDirName='' 
;DefaultGroupName
DefaultGroupName={#AppPublisher}
; DisableDirPage = auto | yes | *no
DisableDirPage= yes
; UserInfoPage = yes | *no - get user info ( UserName, UserInfoOrg, UserInfoSerial )?
;--r1 UserInfoPage=yes
;DefaultUserInfoName
;DefaultUserInfoOrg
;DefaultUserInfoSerial
;DirExistsWarning
;DisableDirPage
DisableFinishedPage = yes
DisableProgramGroupPage = yes
DisableReadyMemo = yes
DisableReadyPage = no
DisableStartupPrompt = yes
DisableWelcomePage = yes
;EnableDirDoesntExistWarning
;ExtraDiskSpaceRequired
;InfoAfterFile
;InfoBeforeFile
;LanguageDetectionMethod
;LicenseFile
LicenseFile=..\InnoSetupScript\license.txt
;MinVersion
;OnlyBelowVersion
;Password
;PrivilegesRequired
;RestartIfNeededByRun
;SetupLogging
ShowLanguageDialog = no
;ShowUndisplayableLanguages
;TimeStampRounding
;TimeStampsInUTC
;TouchDate
;TouchTime
;Uninstallable
;UninstallDisplayIcon
;UninstallDisplayName
;UninstallDisplaySize
;UninstallFilesDir
;UninstallLogMode
;UninstallRestartComputer
;UpdateUninstallLogAppName
UsePreviousAppDir = no
;UsePreviousGroup
UsePreviousLanguage = no
;UsePreviousSetupType
;UsePreviousTasks
UsePreviousUserInfo = no
UserInfoPage = no

; SETUP Cosmetic Session
;AppCopyright
;BackColor
BackColor = clWhite
BackColor2 = clBlack
;BackColorDirection
BackSolid = yes
;FlatComponentsList
;SetupIconFile
;ShowComponentSizes
;ShowTasksTreeLines
WindowShowCaption = no
;WindowStartMaximized
;WindowResizable
WindowVisible = no
;WizardImageBackColor
;WizardImageFile
;WizardImageStretch
;WizardSmallImageFile

[Languages]
Name: "brazilianportuguese"; MessagesFile: "compiler:Languages\BrazilianPortuguese.isl" ; LicenseFile:"..\InnoSetupScript\license-BrazilianPortuguese.txt"
Name: "english"; MessagesFile: "compiler:Default.isl"

[Types]
Name: "demo";      Description: "Demonstração" ; Flags: isCustom ; 
Name: "mono";      Description: "Monousuário"  ; 
Name: "portable";  Description: "Portatil"     ; 
Name: "client";    Description: "Multiusuário - Estação" ;  
Name: "server32";  Description: "Multiusuário - Servidor" ; Check : not Is64BitInstallMode ; 
Name: "server64";  Description: "Multiusuário - Servidor" ; Check : Is64BitInstallMode ; 

[Components]                                              
Name: {#COMP_ClientApp};   Description: "Módulo Cliente";        Types: mono portable client demo ;      Flags : Fixed ; 
Name: {#COMP_Domain};      Description: "Controle de Domínio";  Types: mono portable demo server32 server64 ;      Flags : Fixed ; 
;--R1 Name: {#COMP_RegFarm};     Description: "Registro de Fazendas";  Types: mono portable demo server32 server64 ;      Flags : Fixed ; 
Name: {#COMP_Server32};    Description: "Módulo Servidor";       Types: mono server32 ;             Flags : Fixed ; Check : not Is64BitInstallMode ; 
Name: {#COMP_Server64};    Description: "Módulo Servidor (x64)"; Types: mono server64 ;             Flags : Fixed ; Check : Is64BitInstallMode ; 
Name: {#COMP_SampleData};  Description: "Fazenda padrão";        Types: demo ;                      Flags : Fixed ; 

[Tasks]
Name: desktopicon;        Description: "{cm:CreateDesktopIcon}";                           GroupDescription: "{cm:AdditionalIcons}"; Components: {#COMP_ClientApp} ;
;Name: desktopicon\common; Description: "For all users";                                    GroupDescription: "{cm:AdditionalIcons}"; Components: {#COMP_Server32} {#COMP_Server64} ; Flags: exclusive
;Name: desktopicon\user;   Description: "For the current user only";                        GroupDescription: "{cm:AdditionalIcons}"; Components: {#COMP_Server32} {#COMP_Server64} ; Flags: exclusive unchecked
Name: servercfgIco;        Description: "{cm:CreateDesktopIcon} - Informações do servidor"; GroupDescription: "{cm:AdditionalIcons}"; Components: ({#COMP_Server32} or {#COMP_Server64}) and not {#COMP_ClientApp} ;
;--R1 Name: FazendaPadrao ;     Description: "Instalar fazenda padrão";                          GroupDescription: "{cm:AdditionalIcons}"; Components: {#COMP_RegFarm} and not {#COMP_SampleData} ; Flags: unchecked 
;Name: quicklaunchicon;    Description: "Create a &Quick Launch icon";  GroupDescription: "{cm:AdditionalIcons}";Components: COMP_Server32 COMP_Server64 ; Flags: unchecked
;Name: associate;          Description: "&Associate files";             GroupDescription: "cm:OtherTasks:"; Flags: unchecked

      
[Dirs]
Name: "{code:GetSelectedFolder|{#FolderData}}\" ; Permissions: users-modify ; Components: {#COMP_Domain} ;



[Files]
; Don't use "Flags: ignoreversion" on any shared system files
Source: "c:\windows\fonts\DINPro-Regular.ttf";                 DestDir: "{fonts}"; FontInstall: "DINPro-Regular";        Flags: onlyifdoesntexist uninsneveruninstall;
Source: "c:\windows\fonts\FF_DIN_Pro_Light_Italic.otf";        DestDir: "{fonts}"; FontInstall: "DINPro-Ligth";          Flags: onlyifdoesntexist uninsneveruninstall;
Source: "c:\windows\fonts\FF_DIN_Pro_Medium_Italic.otf";       DestDir: "{fonts}"; FontInstall: "DINPro-Medium";         Flags: onlyifdoesntexist uninsneveruninstall;
Source: "c:\windows\fonts\FF_DIN_Pro_Bold_Italic.otf";         DestDir: "{fonts}"; FontInstall: "DINPro-Bold";           Flags: onlyifdoesntexist uninsneveruninstall;
Source: "c:\windows\fonts\FF_DIN_Pro_Black_Italic.otf";        DestDir: "{fonts}"; FontInstall: "DINPro-Black";          Flags: onlyifdoesntexist uninsneveruninstall;
Source: "c:\windows\fonts\FF_DIN_Light_Italic_Alternate.otf";  DestDir: "{fonts}"; FontInstall: "DIN-LightItalicAlt";    Flags: onlyifdoesntexist uninsneveruninstall;
Source: "c:\windows\fonts\FF_DIN_Medium_Italic_Alternate.otf"; DestDir: "{fonts}"; FontInstall: "DIN-MediumItalicAlt";   Flags: onlyifdoesntexist uninsneveruninstall;
Source: "c:\windows\fonts\FF_DIN_Bold_Italic_Alternate.otf";   DestDir: "{fonts}"; FontInstall: "DIN-BoldItalicAlt";     Flags: onlyifdoesntexist uninsneveruninstall;
Source: "c:\windows\fonts\FF_DIN_Black_Italic_Alternate.otf";  DestDir: "{fonts}"; FontInstall: "DIN-BlackItalicAlt";    Flags: onlyifdoesntexist uninsneveruninstall;
Source: "c:\windows\fonts\calibri.ttf";                        DestDir: "{fonts}"; FontInstall: "Calibri" ;              Flags: onlyifdoesntexist uninsneveruninstall;
Source: "c:\windows\fonts\calibrib.ttf";                       DestDir: "{fonts}"; FontInstall: "Calibri Bold" ;         Flags: onlyifdoesntexist uninsneveruninstall;
Source: "c:\windows\fonts\calibrii.ttf";                       DestDir: "{fonts}"; FontInstall: "Calibri Italic" ;       Flags: onlyifdoesntexist uninsneveruninstall;
Source: "c:\windows\fonts\calibril.ttf";                       DestDir: "{fonts}"; FontInstall: "Calibri Light" ;        Flags: onlyifdoesntexist uninsneveruninstall;
Source: "c:\windows\fonts\calibrili.ttf";                      DestDir: "{fonts}"; FontInstall: "Calibri Light Italic" ; Flags: onlyifdoesntexist uninsneveruninstall;
Source: "c:\windows\fonts\calibriz.ttf";                       DestDir: "{fonts}"; FontInstall:  "Calibri Bold Italic" ; Flags: onlyifdoesntexist uninsneveruninstall;

Source: "*";                                 DestDir: "{code:GetSelectedFolder|{#FolderApp}}"; Excludes: "*.cmd,TestSerialAG5.exe,CL.ini" ; Flags: ignoreversion ; Components: {#COMP_ClientApp}
Source: "CL.ini";                            DestDir: "{code:GetSelectedFolder|{#FolderApp}}"; Flags: onlyifdoesntexist ; Components: {#COMP_ClientApp}
Source: "..\..\Core260\*";                   DestDir: "{code:GetSelectedFolder|{#FolderApp}}\Core260"; Flags: ignoreversion recursesubdirs createallsubdirs ; Components: {#COMP_ClientApp }
Source: "..\..\FBC\FBC257-27050\Win32\*";    DestDir: "{code:GetSelectedFolder|{#FolderApp}}\FB\"; Flags: recursesubdirs createallsubdirs ; Components: {#COMP_ClientApp} 
;Source: "Modelos\*";                        DestDir: "{code:GetSelectedFolder|{#FolderModels}}\Modelos\"; Flags: ignoreversion recursesubdirs createallsubdirs ; Components: {#COMP_ClientApp} 
Source: "Doc\Guia Financeiro.pdf";           DestDir: "{code:GetSelectedFolder|{#FolderApp}}\Doc"; Flags: ignoreversion ; Components: {#COMP_ClientApp} 
Source: "Doc\Guia Zootecnico.pdf";           DestDir: "{code:GetSelectedFolder|{#FolderApp}}\Doc"; Flags: ignoreversion ; Components: {#COMP_ClientApp} 
Source: "CL.Ag5.Client\*";                   DestDir: "{code:GetSelectedFolder|{#FolderApp}}\CL.Ag5.Client"; Flags: ignoreversion recursesubdirs createallsubdirs ; Components: {#COMP_ClientApp} 
Source: "EWB2\*";                            DestDir: "{code:GetSelectedFolder|{#FolderApp}}\EWB2"; Flags: ignoreversion recursesubdirs createallsubdirs ; Components: {#COMP_ClientApp} 
;--R1 Source: "Data\CLAG5.DB";               DestDir: "{code:GetSelectedFolder|{#FolderData}}\"; Flags: ignoreversion ; Components: {#COMP_RegFarm} ;
Source: "Data\.sysutils";                    DestDir: "{code:GetSelectedFolder|{#FolderData}}\"; Flags: onlyifdoesntexist ; Components: {#COMP_Domain} ;
Source: "Data\CLAG5.DB";                     DestDir: "{code:GetSelectedFolder|{#FolderData}}\"; Flags: onlyifdoesntexist ; Components: {#COMP_Domain} ;
;--R1 Source: "Data\CL-000000\*";            DestDir: "{code:GetSelectedFolder|{#FolderData}}\CL-000000\"; Flags: onlyifdoesntexist recursesubdirs createallsubdirs; Components: {#COMP_SampleData} ; 
;--R1 Source: "Data\CL-000000\*";            DestDir: "{code:GetSelectedFolder|{#FolderData}}\CL-000000\"; Flags: onlyifdoesntexist recursesubdirs createallsubdirs; Components: {#COMP_RegFarm} ; Tasks : FazendaPadrao ;  
Source: "CL.ini";                            DestDir: "{code:GetSelectedFolder|{#FolderServer}}\RCtrl\"; Flags: onlyifdoesntexist ; Components: ({#COMP_Server32} or {#COMP_Server64}) and not  {#COMP_ClientApp}
Source: "CLAg5.mdt";                         DestDir: "{code:GetSelectedFolder|{#FolderServer}}\RCtrl\"; Components: ({#COMP_Server32} or {#COMP_Server64}) and not  {#COMP_ClientApp}
Source: "7z.dll";                            DestDir: "{code:GetSelectedFolder|{#FolderServer}}\RCtrl\"; Components: ({#COMP_Server32} or {#COMP_Server64}) and not  {#COMP_ClientApp}
Source: "icudt30.dll";                       DestDir: "{code:GetSelectedFolder|{#FolderServer}}\RCtrl\"; Components: ({#COMP_Server32} or {#COMP_Server64}) and not  {#COMP_ClientApp}
Source: "icuin30.dll";                       DestDir: "{code:GetSelectedFolder|{#FolderServer}}\RCtrl\"; Components: ({#COMP_Server32} or {#COMP_Server64}) and not  {#COMP_ClientApp}
Source: "icuuc30.dll";                       DestDir: "{code:GetSelectedFolder|{#FolderServer}}\RCtrl\"; Components: ({#COMP_Server32} or {#COMP_Server64}) and not  {#COMP_ClientApp}
Source: "CL.Ag5.InitFarm.exe";               DestDir: "{code:GetSelectedFolder|{#FolderServer}}\RCtrl\"; Components: ({#COMP_Server32} or {#COMP_Server64}) and not  {#COMP_ClientApp}
;Source: "FB\*";                             DestDir: "{code:GetSelectedFolder|{#FolderServer}}\RCtrl\FB\"; Flags: recursesubdirs createallsubdirs ; Components: ({#COMP_Server32} or {#COMP_Server64}) and not  {#COMP_ClientApp}
;Source: "..\..\{#DEF_FBSource}\*";          DestDir: "{code:GetSelectedFolder|{#FolderServer}}";  Components: {#COMP_ClientApp} 
;Source: "..\..\{#DEF_FBSource}\Win32\*";    DestDir: "{code:GetSelectedFolder|{#FolderServer}}"; Flags: recursesubdirs createallsubdirs; Components: {#COMP_ClientApp} ; Check: not Is64BitInstallMode
;Source: "..\..\{#DEF_FBSource}\x64\*";      DestDir: "{code:GetSelectedFolder|{#FolderServer}}"; Flags: recursesubdirs createallsubdirs; Components: {#COMP_ClientApp} ; Check: Is64BitInstallMode
Source: "..\..\{#DEF_FBSource}\*";           DestDir: "{code:GetSelectedFolder|{#FolderApp}}\FBS257\"; Excludes: "sgn.cmd" ; Components: {#COMP_ClientApp} 
Source: "..\..\{#DEF_FBSource}\Win32\*";     DestDir: "{code:GetSelectedFolder|{#FolderApp}}\FBS257\"; Excludes: "sgn.cmd" ; Flags: ignoreversion recursesubdirs createallsubdirs; Components: {#COMP_ClientApp} ; Check: not Is64BitInstallMode
Source: "..\..\{#DEF_FBSource}\x64\*";       DestDir: "{code:GetSelectedFolder|{#FolderApp}}\FBS257\"; Excludes: "sgn.cmd" ; Flags: ignoreversion recursesubdirs createallsubdirs; Components: {#COMP_ClientApp} ; Check: Is64BitInstallMode

[Icons]             
Name: "{group}\{#AppName}"; Filename: "{app}\{#AppExeName}" ; Components: {#COMP_ClientApp}
Name: "{group}\Guia Financeiro"; Filename: "{app}\Doc\Guia Financeiro.pdf" ; Components: {#COMP_ClientApp}
Name: "{group}\Guia Zootécnico"; Filename: "{app}\Doc\Guia Zootecnico.pdf" ; Components: {#COMP_ClientApp}
Name: "{commondesktop}\{#AppName}"; Filename: "{app}\{#AppExeName}"; Tasks: desktopicon
Name: "{commondesktop}\{#ServerConfigFile}"; Filename: "notepad.exe" ; Parameters: "{code:GetSelectedFolder|{#FolderServerCfg}}\{#ServerConfigFile}" ; Tasks: servercfgIco
Name: "{commonstartup}\Send Data CDL"; Filename: "{app}\Cl.Ag5.SendDataCDL.exe"; WorkingDir: {app}; IconFilename: "{app}\Cl.Ag5.SendDataCDL.exe"; IconIndex: 0
Name: "{commonstartup}\CDL - Update App"; Filename: "{app}\Cl.Ag5.UpdateApplication.exe"; WorkingDir: {app}; IconFilename: "{app}\Cl.Ag5.UpdateApplication.exe"; IconIndex: 0




[Run]
Filename: "{app}\{#AppExeName}"; Description: "{cm:LaunchProgram,{#StringChange(AppName, "&", "&&")}}"; Components : {#COMP_ClientApp} ; Flags: nowait postinstall skipifsilent
Filename: "{app}\Cl.Ag5.SendDataCDL.exe" ; Components : {#COMP_ClientApp} ; Flags: nowait postinstall skipifsilent
Filename: "{app}\Cl.Ag5.UpdateApplication.exe"; Components : {#COMP_ClientApp} ; Flags: nowait postinstall skipifsilent


[Code]

#include 'innoCodeHelper.ispas' ;

(* events *)

(* use for check serial number on UserInfoPage
function CheckSerial(Serial: String): Boolean;
begin
   //
end
*)
                    
{
  // predefined wizard pages
  wpWelcome, wpLicense, wpPassword, wpInfoBefore, wpUserInfo, wpSelectDir, wpSelectComponents, 
  wpSelectProgramGroup, wpSelectTasks, wpReady, wpPreparing, wpInstalling, wpInfoAfter, wpFinished
}

const
 cCheckBox = false;
 cRadioButton  = true;
                             
procedure PublisherURLLink_Click(Sender: TObject);
var
  Dummy: Integer;
begin
  ShellExec('open', '{#AppURL}', '', '', SW_SHOWNORMAL, ewNoWait, Dummy);
end;

procedure CreatePublisherURLLink ;
begin
  with TNewStaticText.Create(WizardForm) do
    begin
     Parent     := WizardForm;
     Top        := WizardForm.CancelButton.Top + WizardForm.CancelButton.Height - Height - 2;
     Left       := 20;
     Caption    := '{#AppPublisher}';
     Font.Style := Font.Style + [fsUnderLine];
     Font.Color := clBlue;
     Cursor     := crHand;
     OnClick    := @PublisherURLLink_Click
  end ;
end ;

// InstallTypePage = Demo /Registred
// RegistredInstallTypePage = Mono, Portable, Station, Server

type
  TInstallType = (itDemo, itRegistred ) ;
  TRegistredInstallType = (ritMonoUser, ritPortable, ritStation, ritServer ) ;

const
  _VALUE_INSTALLTYPE_DEMO         = 0 ;
  _VALUE_INSTALLTYPE_REGISTRED    = 1 ;

const
  _VALUE_REGISTRED_INSTALLTYPE_MONOUSER    = 0 ;
  _VALUE_REGISTRED_INSTALLTYPE_PORTABLE    = 1 ;
  _VALUE_REGISTRED_INSTALLTYPE_STATION     = 2 ;
  _VALUE_REGISTRED_INSTALLTYPE_SERVER      = 3 ;

var
  InstallType : TInstallType ;
  RegistredInstallType : TRegistredInstallType ;


function GetAppID ( a : string ) : string ;
begin
   if InstallType = itRegistred then
     case RegistredInstallType of 
      ritMonoUser : Result := '{#AppID_Mono}' ;
      ritPortable : Result := '{#AppID_Portable}' ;
      ritStation  : Result := '{#AppID_Station}' ;
      ritServer   : Result := '{#AppID_Server}' ;
     end
   else
     Result := '{#AppID_Demo}' ;
end ;

var
  DescriptionInstallTypeMemo : TMemo ;
  InstallTypePage : TInputOptionWizardPage; 


function InstallTypeIsRegistred : boolean ;
begin
  Result := InstallType = itRegistred ;
end ;

function GetCreateUninstallRegKey : boolean ;
begin
  Result := not InstallTypeIsRegistred 
          or ( RegistredInstallType <> ritPortable ) ;
end ;

function GetPreviousInstallType : integer ;
var
 OldRegistredInstallType : TRegistredInstallType ;
begin

  Result := -1 ;

  InstallType          := itRegistred ;
  RegistredInstallType := ritMonoUser ;
  Result := StrToInt ( GetPreviousData ( '{#PREV_InstallType}', '-1' ) )  ;

  RegistredInstallType := ritPortable ;
  Result := StrToInt ( GetPreviousData ( '{#PREV_InstallType}', '-1' ) )  ;

  RegistredInstallType := ritStation  ;
  Result := StrToInt ( GetPreviousData ( '{#PREV_InstallType}', '-1' ) )  ;

  RegistredInstallType := ritServer   ;
  Result := StrToInt ( GetPreviousData ( '{#PREV_InstallType}', '-1' ) )  ;

  RegistredInstallType := OldRegistredInstallType ;

  if Result = -1 then
     InstallType          := itDemo ;

end ;

var
  OldSelectedInstallType, SelectedInstallType : integer ;

procedure SelectType ( AType : integer ) ;
begin
   OldSelectedInstallType := SelectedInstallType ;
   SelectedInstallType := AType
   WizardForm.TypesCombo.ItemIndex := AType
   WizardForm.TypesCombo.OnChange ( nil ) ;
end ;

var
  InputDirList     : array of TEdit ;
  InputDirTypeList : array of String  ;

function GetAppendFolder( AFolderType : string ) : string ;
begin
  if  AFolderType = '{#FolderApp}'    then
      Result := '{#AppPublisher}\{#InternalAppName}\{#AppVersion}'
  else if AFolderType = '{#FolderServer}' then
    begin
     if Is64BitInstallMode then                                                                    
        Result := '{#AppPublisher}\Firebird\Firebird-{#DEF_FBVERSION}_x64' 
     else
        Result := '{#AppPublisher}\Firebird\Firebird-{#DEF_FBVERSION}_Win32'
    end
  else if AFolderType = '{#FolderData}'   then
     Result := '{#AppPublisher}\{#InternalAppName}\{#AppVersion}'
  else if AFolderType = '{#FolderModels}' then
     Result := '{#AppPublisher}\{#InternalAppName}\{#AppVersion}'
end ;

function GetDefaultFolder( AFolderType : string ) : string ;
begin
 
  Result := '' ;

  if      AFolderType = '{#FolderApp}'    then
      Result := ExpandConstant ( '{pf32}' )
  else if AFolderType = '{#FolderServer}' then
    begin
     if Is64BitInstallMode then
      Result := ExpandConstant ( '{pf64}' )
     else
      Result := ExpandConstant ( '{pf32}' )
    end
  else if AFolderType = '{#FolderData}'   then
     Result := ExpandConstant ( '{commonappdata}' )
      
  else if AFolderType = '{#FolderModels}' then
     Result := ExpandConstant ( '{commondocs}' )

  else if AFolderType = '{#FolderServerCfg}' then
     Result := ExpandConstant ( '{commondocs}' ) ;

  Result := AddBackSlash ( Result ) ;     

end ;
     
function GetAppendedFolder ( Directory : string ; AFolderType : string ) : string ;
var
  AppendFolder : string ;
begin

  Result := Directory ;

  if Trim ( Result ) = '' then
     exit ;

  try

    Result := AddBackslash( Result ) ;
 
    if AFolderType = '' then
      exit ;

    AppendFolder := GetAppendFolder (  AFolderType ) ;
    if Pos ( AnsiUpperCase ( AppendFolder ), AnsiUpperCase ( Result ) ) = 0 then
      Result := Result + AppendFolder
     
  finally
     Result := AddBackslash( Result ) ; 
  end ;

end ;


procedure CheckForAppendFolder ( AIndex : integer ) ;
var
  Edit : TEdit ; 
  Directory : string ;
begin

  Edit      := InputDirList[ AIndex ] ;

  if Trim ( Edit.Text ) = '' then
     exit ;

  if InputDirTypeList[ AIndex ] = '' then
     exit ;

  Directory := GetAppendedFolder ( Edit.Text, InputDirTypeList[ AIndex ]  ) ;

  if Directory <> Edit.Text then
     Edit.Text := Directory ;

end ;


procedure InitEdits ;
var
  ItemIdx : integer ;
  ArrLen   : integer ;
  Text : string ;
begin
  if OldSelectedInstallType = SelectedInstallType then
    exit ;

  ArrLen := GetArrayLength( InputDirList ) ;
  for ItemIdx := 0  to ArrLen - 1 do
    begin                                                           
      Text := GetPreviousData ( InputDirTypeList  [ ItemIdx ], '' ) ;

      if Text = '' then
         Text := GetAppendedFolder( GetDefaultFolder ( InputDirTypeList  [ ItemIdx ] ), InputDirTypeList  [ ItemIdx ] ) ;

      if InputDirList  [ ItemIdx ].Text <> Text then
         InputDirList  [ ItemIdx ].Text := Text ;
    end ;
end ;

function InstallTypeNextButton_Click(Page: TWizardPage): Boolean;
begin       
  if InstallType = itDemo then
     SelectType ( _VALUE_INSTALLTYPE_DEMO ) ;

  if OldSelectedInstallType <> SelectedInstallType then
     InitEdits ;
  Result := True;
end;


// evento ... tipo de instalação ( demo / registrado )
procedure InstallType_ClickCheck(Sender : TObject);
begin
   if InstallTypePage.Values[ _VALUE_INSTALLTYPE_DEMO     ] then 
     begin
       InstallType := itDemo 
       DescriptionInstallTypeMemo.Lines.Text :=   'Modo demonstração : Não é necessário registro de usuário.'
                                               + ' Será criada uma fazenda padrão para testar as funcionalidades' 
                                               + ' do software. Não é possível criar novas fazendas. Não é possível'
                                               + ' utilizar importação diária do Alpro, Importação, Exportação ou Sincronização'
                                               + ' de dados.' 
       WizardForm.LicenseMemo.Text := 'Contrato de Licença de uso Modo Demonstração.'               
     end 
   else // registred
     begin
      InstallType := itRegistred
      DescriptionInstallTypeMemo.Lines.Text := 'Modo regsitrado : Necessário registro de usuário.'
                                            + ' Permite intalações : Monousuário, Portavel, Modo Estação, Modo Servidor.' 
                                            + ' Permite criar a primeira fazenda. Permite Importação, Exportação ou Sincronização'
                                            + ' de dados. Importação diária do Alpro disponível mediate licenciamento.'
      WizardForm.LicenseMemo.Text := 'Contrato de Licença de uso Modo Registrado.'                                      
     end 
   
end;

procedure CreateInstallTypePage ( AAfterPageID : integer );
var
  PreviousInstallType : integer ;
begin
 
  InstallTypePage := CreateInputOptionPage(
    AAfterPageID,
    'Modo de instalação' {ACaption},
    'Permite a instalação Monousuário ou em Rede' {ADescription},
    'Escolha um modo de instalação' {ASubCaption},
    cRadioButton {Exclusive},
    False {ListBox}
  ); {: TInputOptionWizardPage}

  InstallTypePage.Add('Demonstração'  ) ; //_VALUE_INSTALLTYPE_DEMO                                                                                                                                                                                       
  InstallTypePage.Add('Registrado'    ) ; //_VALUE_INSTALLTYPE_REGISTRED                                                                                                                                                                                       

  PreviousInstallType := GetPreviousInstallType() ;

  if PreviousInstallType < 0 then
     PreviousInstallType := 0 
  else if PreviousInstallType > 1 then
     PreviousInstallType := 1 ;

  InstallTypePage.Values[ PreviousInstallType  ] := True ; 
  
  InstallTypePage.CheckListBox.Height := InstallTypePage.CheckListBox.MinItemHeight * InstallTypePage.CheckListBox.Items.Count ;

  DescriptionInstallTypeMemo := TMemo.Create ( InstallTypePage ) ;
  with DescriptionInstallTypeMemo do
  begin
     Parent   := InstallTypePage.Surface ;
     Color    := InstallTypePage.Surface.Color ;
     Top      := InstallTypePage.CheckListBox.Top + InstallTypePage.CheckListBox.Height + 10 ; 
     Width    := InstallTypePage.Surface.Width ;
     TabStop  := False ;
     ReadOnly := True ;
  end ;
  
  // Assign the Click Event.
  InstallTypePage.CheckListBox.OnClickCheck := @InstallType_ClickCheck;
  //InstallTypePage.OnActivate := @BlobFileForm_Activate;
  InstallTypePage.OnNextButtonClick := @InstallTypeNextButton_Click;

  // update selection
  InstallType_ClickCheck( nil ) ;
end ;

var
  RegisterCodeEdit     : TNewEdit ;
  ActivationKeyEdit    : TNewEdit ;
  DescriptionRegistredInstallTypeMemo : TMemo ;
  RegistredInstallTypePage : TInputOptionWizardPage; 
  
procedure UpdateRegistredInstallControls ;
begin
   case  RegistredInstallType of
    ritMonoUser :
     begin
      DescriptionRegistredInstallTypeMemo.Lines.Text := 'modo monousuário' 
     end 
    ritPortable :
     begin
      DescriptionRegistredInstallTypeMemo.Lines.Text := 'modo portável' 
     end
    ritStation :
     begin
      DescriptionRegistredInstallTypeMemo.Lines.Text := 'modo estação' 
     end
    ritServer :
     begin
      DescriptionRegistredInstallTypeMemo.Lines.Text := 'modo servidor' 
     end 
   end ;
end ;

// evento - tipo de instalação registrado ( Mono, Portable, Station, Server ) 
procedure RegistredInstallType_ClickCheck(Sender : TObject);
begin
   if      RegistredInstallTypePage.Values[ _VALUE_REGISTRED_INSTALLTYPE_MONOUSER ] then RegistredInstallType := ritMonoUser
   else if RegistredInstallTypePage.Values[ _VALUE_REGISTRED_INSTALLTYPE_PORTABLE ] then RegistredInstallType := ritPortable
   else if RegistredInstallTypePage.Values[ _VALUE_REGISTRED_INSTALLTYPE_STATION  ] then RegistredInstallType := ritStation
   else if RegistredInstallTypePage.Values[ _VALUE_REGISTRED_INSTALLTYPE_SERVER   ] then RegistredInstallType := ritServer ;
   UpdateRegistredInstallControls ;  
end;

const
  _LABEL_SPACE = 100 ;
  _EDIT_ROW_SPACE  = 12 ;


function CheckActivationKey ( ARegisterCode, AActivationKey : string ): boolean ;
begin
  Result := (ARegisterCode = Digits ( ARegisterCode ))
        and (ARegisterCode <> StringOfChar ( '0', 6 )) 
        and (FormatMD5 ( GetMD5OfString( 'CL-' + ARegisterCode ) ) = AActivationKey)
end ;

procedure CheckUserInfoPageNextButtonEnabled ;
begin
  with WizardForm.NextButton do
     if (InstallType = itDemo) then
        Enabled :=  (Trim ( WizardForm.UserInfoNameEdit.Text ) <> '') 
              and   ( 
                      ((Trim ( RegisterCodeEdit.Text  ) = '') and (Trim ( ActivationKeyEdit.Text ) = ''))
                   or (     (Length ( Trim ( RegisterCodeEdit.Text  ) ) = RegisterCodeEdit.MaxLength)
                        and (Length ( Trim ( ActivationKeyEdit.Text ) ) = ActivationKeyEdit.MaxLength)
                      )
                    )   
     else
        Enabled := (Trim ( WizardForm.UserInfoNameEdit.Text ) <> '') 
              and (Length ( Trim ( RegisterCodeEdit.Text  ) ) = RegisterCodeEdit.MaxLength)
              and (Length ( Trim ( ActivationKeyEdit.Text ) ) = ActivationKeyEdit.MaxLength) 
end ;

procedure UserInfoPage_Activate(Sender: TWizardPage);
begin
  with WizardForm do
    begin
     if Trim ( UserInfoNameEdit.Text ) = '' then
       UserInfoNameEdit.Text := GetPreviousData('{#PREV_UserName}', ExpandConstant('{sysuserinfoname}'));

     if Trim ( UserInfoOrgEdit.Text ) = '' then
       UserInfoOrgEdit.Text  := GetPreviousData('{#PREV_CompanyName}',  ExpandConstant('{sysuserinfoorg}'));
    end ;

  CheckUserInfoPageNextButtonEnabled
end ;

function UserInfoPageNextButton_Click(Sender: TWizardPage): Boolean;
begin
  Result := Trim ( WizardForm.UserInfoOrgEdit.Text ) <> '' ;
  if not Result then
  begin
    MsgBox ( 'Informe o nome da fazenda', mbError, MB_OK ) ;
    exit ;
  end

  if (InstallType = itDemo) and (Trim ( RegisterCodeEdit.Text  ) = '') and (Trim(ActivationKeyEdit.Text)='') then
     exit ;

  Result := CheckActivationKey ( RegisterCodeEdit.Text, ActivationKeyEdit.Text ) ;
  if not Result then
    MsgBox ( 'Código de ativação inválido', mbError, MB_OK ) ;
end ;

procedure UserInfoNameEdit_Change (Sender: TObject);
begin
  CheckUserInfoPageNextButtonEnabled
end ;

procedure RegisterCodeEdit_Change (Sender: TObject);
begin
  CheckUserInfoPageNextButtonEnabled
end ;

procedure RegisterCodeEdit_KeyPress(Sender: TObject; var Key: Char);
begin
   if (( Key > #31 ) and ( Key < #127 )) 
    and not ( (Key >= '0' ) and (Key <=  '9') )  then
      Key := #0
end ;


procedure ActivationKeyEdit_KeyPress(Sender: TObject; var Key: Char);
begin
   if (( Key > #31 ) and ( Key < #127 )) 
    and  not ( ((Key >= '0' ) and (Key <= '9' ))
            or ((Key >= 'A' ) and (Key <= 'Z' ))
            or ((Key >= 'a' ) and (Key <= 'z' ))
          ) then            
     Key := #0
end ;

procedure ActivationKeyEdit_Change (Sender: TObject);
var
 CursorPos, SelelectionLength, TextLength : integer ;
begin
  with TEdit ( Sender ) do
    begin
     OnChange           := nil ;
     CursorPos          := SelStart ;
     SelelectionLength  := SelLength ;
     TextLength         := Length ( Text )
     Text               := FormatMD5 ( TEdit ( Sender ).Text ) ;
     if Length ( Text ) > MaxLength then
        SelStart := MaxLength
     else if Length ( Text ) > TextLength then
       begin
         SelStart  := CursorPos + 1 ;
         SelLength := SelelectionLength + 1;
       end
     else
       begin
         SelStart  := CursorPos  ;
         SelLength := SelelectionLength ;
       end
     OnChange := @ActivationKeyEdit_Change ;
    end

  CheckUserInfoPageNextButtonEnabled
end ;


procedure InitUserInfoPage ;
var
  YPos : integer ;
  XPos : integer ;
begin
  // overrride some default of UserInfoPage   
  with WizardForm do
    begin

     PageFromID ( wpUserInfo ).OnActivate        := @UserInfoPage_Activate ;
     PageFromID ( wpUserInfo ).OnNextButtonClick := @UserInfoPageNextButton_Click ;
     WizardForm.UserInfoOrgLabel.Caption := 'Fazenda' 

     // change default OnChange event of UserInfoNameEdit to check NextButton Enabled
     UserInfoNameEdit.OnChange := @UserInfoNameEdit_Change ;
     // disable default OnChange event of UserInfoOrgEdit
     UserInfoOrgEdit.OnChange := nil ;
    end ;

  // get initial position for aditional Labels/Edits
  YPos := WizardForm.UserInfoOrgEdit.Top  + WizardForm.UserInfoOrgEdit.Height + ScaleY ( _EDIT_ROW_SPACE ) ;
  XPos := WizardForm.UserInfoOrgEdit.Left ;

  // label for resgistration code
  with TLabel.Create ( WizardForm.UserInfoPage ) do
    begin
       Parent  := WizardForm.UserInfoPage ;
       Top     := YPos + ScaleY ( 3 ) ;
       Left    := XPos ;
       Caption := 'Código de registro :'
    end

  // edit for resgistration code
  RegisterCodeEdit := TNewEdit.Create ( WizardForm.UserInfoPage ) ;
  with RegisterCodeEdit do
    begin
       Parent     := WizardForm.UserInfoPage ;
       Top        := YPos ;
       Left       := XPos + ScaleX ( _LABEL_SPACE ) ;
       YPos       := YPos + Height + ScaleY ( _EDIT_ROW_SPACE ) ;
       MaxLength  := {#RegisterCodeMaxSize}
       Width      := ScaleX ( MaxLength * 7  ) + ScaleX ( 10 ) ;
       Font.Name  := 'Courier New' ;
       Font.Size  := 9 ;
       OnChange   := @RegisterCodeEdit_Change ;
       OnKeyPress := @RegisterCodeEdit_KeyPress ; 
    end

  // label for activation key
  with TLabel.Create ( WizardForm.UserInfoPage ) do
    begin
       Parent  := WizardForm.UserInfoPage ;
       Top     := YPos + ScaleY ( 3 ) ;
       Left    := XPos ;             
       Caption := 'Chave de ativação :' 
    end
     
  // edit for activation key
  ActivationKeyEdit := TNewEdit.Create ( WizardForm.UserInfoPage ) 
  with ActivationKeyEdit do
    begin
       Parent     := WizardForm.UserInfoPage ;
       Top        := YPos ;
       Left       := XPos + ScaleY ( _LABEL_SPACE ) ;
       YPos       := YPos + Height + ScaleY ( _EDIT_ROW_SPACE ) ;
       MaxLength  := {#ActivateKeyMaxSize} ;
       Width      := ScaleX ( MaxLength * 7  ) + ScaleX ( 10 ) ;// ScaleX ( 270 ) ;
       Font.Name  := 'Courier New' ;
       Font.Size  := 9 ;       
       CharCase   := ecUpperCase ;
       OnChange   := @ActivationKeyEdit_Change ;
       OnKeyPress := @ActivationKeyEdit_KeyPress 
       Text := FormatMD5 ( GetMD5OfString( 'CL-000001' ) );       
    end 
end ;

procedure InitPreparingToInstall ;
var
  YPos : integer ;
  XPos : integer ;
begin

  // get initial position for aditional Labels/Edits
  YPos := 10 + ScaleY ( _EDIT_ROW_SPACE ) ;
  XPos := 10  ;

  // label for resgistration code
  with TLabel.Create ( WizardForm.PreparingPage ) do
    begin
       Parent  := WizardForm.PreparingPage  ;
       Top     := YPos + ScaleY ( 3 ) ;
       Left    := XPos ;
       Caption := 'Preparando instalação do banco de dados.'
    end

  YPos := YPos + 15 ; 

  // label for resgistration code
  with TLabel.Create ( WizardForm.PreparingPage ) do
    begin
       Parent  := WizardForm.PreparingPage  ;
       Top     := YPos + ScaleY ( 3 ) ;
       Left    := XPos ;
       Caption := 'Isso pode levar alguns minutos.'
    end

end ;


function RegistredInstallTypeNextButton_Click(Page: TWizardPage): Boolean;
var
 TypesComboIndex : integer ;
begin

  if       RegistredInstallType = ritMonoUser  then TypesComboIndex := _VALUE_REGISTRED_INSTALLTYPE_MONOUSER
  else if  RegistredInstallType = ritPortable  then TypesComboIndex := _VALUE_REGISTRED_INSTALLTYPE_PORTABLE   
  else if  RegistredInstallType = ritStation   then TypesComboIndex := _VALUE_REGISTRED_INSTALLTYPE_STATION    
  else if  RegistredInstallType = ritServer    then TypesComboIndex := _VALUE_REGISTRED_INSTALLTYPE_SERVER   ;

  SelectType ( _VALUE_INSTALLTYPE_REGISTRED +  TypesComboIndex )
  
  Result := True ;
end ;



procedure CreateRegistredInstallTypePage ( AAfterPageID : integer ) ;
begin


  RegistredInstallTypePage := CreateInputOptionPage(
    AAfterPageID,
    'Modo de instalação' {ACaption},
    'Permite a instalação Monousuário ou em Rede' {ADescription},
    'Escolha um modo de instalação' {ASubCaption},
    cRadioButton {Exclusive},
    False {ListBox}
  ) { : TInputOptionWizardPage };

  RegistredInstallTypePage.Add('Monousuário'             ) ; //_VALUE_LINCESED_INSTALLTYPE_MONOUSER                                                                                                                                                                                       
  RegistredInstallTypePage.Add('Portátil'                ) ; //_VALUE_LINCESED_INSTALLTYPE_PORTABLE
  RegistredInstallTypePage.Add('Multiusuário - Estação'  ) ; //_VALUE_LINCESED_INSTALLTYPE_MONOUSER                                                                                                                                                                                       
  RegistredInstallTypePage.Add('Multiusuário - Servidor' ) ; //_VALUE_LINCESED_INSTALLTYPE_SERVER

  RegistredInstallTypePage.Values[_VALUE_REGISTRED_INSTALLTYPE_MONOUSER] := True ; // _VALUE_REGISTRED_INSTALLTYPE_MONOUSER 
  
  RegistredInstallTypePage.CheckListBox.Height := RegistredInstallTypePage.CheckListBox.MinItemHeight * RegistredInstallTypePage.CheckListBox.Items.Count ;

  DescriptionRegistredInstallTypeMemo := TMemo.Create ( RegistredInstallTypePage ) ;
  with DescriptionRegistredInstallTypeMemo do
  begin
     Parent   := RegistredInstallTypePage.Surface ;
     Color    := RegistredInstallTypePage.Surface.Color ;
     Top      := RegistredInstallTypePage.CheckListBox.Top + RegistredInstallTypePage.CheckListBox.Height + 10 ; 
     Width    := RegistredInstallTypePage.Surface.Width ;
     TabStop  := False ;
     ReadOnly := True ;
  end ;
  
  // Assign the Click Event.
  RegistredInstallTypePage.CheckListBox.OnClickCheck := @RegistredInstallType_ClickCheck;
  RegistredInstallTypePage.OnNextButtonClick := @RegistredInstallTypeNextButton_Click;

end ;



procedure ReAlign ( AWizardPage : TWizardPage ; AIndex : integer ; var AYPos : integer ; ASpace : integer ) ;
begin
  // change pos      
  if AWizardPage is TInputDirWizardPage  then 
    with TInputDirWizardPage ( AWizardPage ) do
      begin
       PromptLabels[AIndex].Top   := AYPos ;
       PromptLabels[AIndex].Width := SurfaceWidth  div 6 ;
       Edits  [ AIndex ].Left     := PromptLabels[ AIndex ].Left  + PromptLabels[ AIndex ].Width + ScaleX ( 10 ) ;
       Edits  [ AIndex ].Width    := Buttons[ AIndex ].Left - Edits [ AIndex ].Left - ScaleX ( 10 )  ;
       Edits[AIndex].Top          := PromptLabels[AIndex].Top - ScaleY ( 2 ) ;
       Buttons[AIndex].Top        := Edits[AIndex].Top - ScaleY ( 2 ) ;
       AYPos                      := Edits[AIndex].Top + Edits[AIndex].Height + ScaleY ( ASpace ) ;
      end

end ;


procedure DirPageButton_Click ( Sender : TObject ) ;
var
  Directory : string ;
  Edit : TEdit ; 

begin
  Edit := TEdit ( InputDirList [ TButton ( Sender ).Tag ] ) ;
  Directory := Edit.Text ;
  if BrowseForFolder( 'Pasta',  Directory, True ) then 
    begin
      Edit.Text := Directory  ;
      CheckForAppendFolder ( Edit.Tag ) ;
    end ;
end ;


procedure DirPageEdit_Change ( Sender : TObject ) ;
begin
  WizardForm.NextButton.Default := False ;
end ;

procedure DirPageEdit_Exit ( Sender : TObject ) ;
begin
   TEdit( Sender ).OnChange := @DirPageEdit_Change
   CheckForAppendFolder ( TEdit( Sender ).Tag ) ;
   TEdit( Sender ).OnChange := @DirPageEdit_Change
   WizardForm.NextButton.Default := True ;
end ;

procedure DirPageEditDefault_Exit ( Sender : TObject ) ;
begin
   DirPageEdit_Exit ( Sender ) ;
   WizardForm.DirEdit.Text := TEdit ( Sender ).Text ;
end ;


// configura o DirEdit da pagina wpSelectDir ...
procedure InitDefaultDirPage ;
var
  ArrLen   : integer ;

begin
  ArrLen := GetArrayLength( InputDirList ) ;
     
  // resize array
  SetArrayLength ( InputDirList,     ArrLen + 1 ) ;
  SetArrayLength ( InputDirTypeList, ArrLen + 1 ) ;

  // add info
  InputDirList     [ ArrLen ] := WizardForm.DirEdit ;
  InputDirTypeList [ ArrLen ] := '{#FolderApp}' ;
   
  // config edit

  WizardForm.DirEdit.OnExit   := @DirPageEditDefault_Exit ;     
  WizardForm.DirEdit.OnChange := @DirPageEdit_Change ;
  WizardForm.DirEdit.Tag      := ArrLen ;
  WizardForm.DirEdit.Text     := '' ;           
  // config button

  WizardForm.DirBrowseButton.OnClick := @DirPageButton_Click ;
  WizardForm.DirBrowseButton.Tag     := ArrLen ;

end;


procedure AddDirToDirPage ( AInputPage : TInputDirWizardPage ; APrompt : string ; AFolderID : string ) ;
var
  ItemIdx : integer ;
  ArrLen   : integer ;
begin
  with AInputPage do
   begin
     ItemIdx := Add( APrompt ) ;
     //    Buttons[Index ]: TNewButton; read;
     ArrLen := GetArrayLength( InputDirList ) ;
     
     // resize array
     SetArrayLength ( InputDirList,     ArrLen + 1 ) ;
     SetArrayLength ( InputDirTypeList, ArrLen + 1 ) ;
     // add info
     InputDirList     [ ArrLen ] := Edits[ItemIdx] ;
     InputDirTypeList [ ArrLen ] := AFolderID ;
     // config edit

     if ItemIdx = 0 then
        Edits  [ ItemIdx ].OnExit   := @DirPageEditDefault_Exit
     else
        Edits  [ ItemIdx ].OnExit   := @DirPageEdit_Exit ;     

     Edits  [ ItemIdx ].OnChange := @DirPageEdit_Change ;
     Edits  [ ItemIdx ].Tag      := ArrLen ;
     // config button
     Buttons[ ItemIdx ].OnClick := @DirPageButton_Click ;
     Buttons[ ItemIdx ].Tag     := ArrLen ;

    end ;
end;

type
  TArrayOfEdit = Array[0..3] of TEdit ; 
  TServerArray = Array[0..1] of TArrayOfEdit ;

const
  _EDIT_SERVER_INSTANCENAME    = 0 ;
  _EDIT_SERVER_DATAPORT        = 1 ;
  _EDIT_SERVER_CONTROLLERPORT  = 2 ;

const
  GROUP_SERVERINFO_SERVERPAGE = 0 ;
  GROUP_SERVERINFO_CLIENTPAGE = 1 ;

var
  ServerInfoArray : TServerArray ;
  ServerConfigString : string ;
  ServerIntoLabel : TLabel ;

procedure UpdateServerConfigString ;
begin
  ServerConfigString := Format ( '%s/%5.5d/%5.5d|%s', [ 
       Copy ( ServerConfigString, 1, Pos ( '/', ServerConfigString ) -1 ),
       StrToIntDef ( ServerInfoArray[ GROUP_SERVERINFO_SERVERPAGE ][_EDIT_SERVER_DATAPORT ].Text, 0 ), 
       StrToIntDef ( ServerInfoArray[ GROUP_SERVERINFO_SERVERPAGE ][_EDIT_SERVER_CONTROLLERPORT].Text, 0 ),
       '' ] ) ; 
  ServerIntoLabel.Caption := ServerConfigString ;
end ;

procedure ServerInfoEdit_Change ( Sender : TObject ) ;
begin
  UpdateServerConfigString ;
end ;

procedure ServerPortEdit_KeyPress(Sender: TObject; var Key: Char);
begin
   if (( Key > #31 ) and ( Key < #127 )) 
    and not ( (Key >= '0' ) and (Key <=  '9') )  then
      Key := #0
end ;

   
procedure CreateInfoServer ( APage : TWizardPage ; AGroup : integer ; var AYPos : integer ) ;
begin
  //YPos := ServerConfigPage.Edits[0].Top + ServerConfigPage.Edits[0].Height + ScaleY ( 8 ) ;
                                                                                 
  // labels
  with TLabel.Create(APage) do
    begin
      Parent  := APage.Surface;  
      Top     := AYPos;
      Caption := 'Nome do Serviço de dados';
    end ;

  with TLabel.Create(APage) do
    begin
      Parent  := APage.Surface;  
      Top     := AYPos;
      Caption := 'Porta TCP/IP de Dados';
      Left    := APage.SurfaceWidth div 3 ;  
    end ;

  with TLabel.Create(APage) do
    begin
      Parent  := APage.Surface;  
      Top     := AYPos;
      Caption := 'Porta TCP/IP do Controlador ';
      Left    := APage.SurfaceWidth div 3 * 2 ;
      AYPos    := Top + Height + ScaleY ( 8 ) ;
    end ;
 
  // edits
  ServerInfoArray[ AGroup ][_EDIT_SERVER_INSTANCENAME] := TEdit.Create(APage);
  with ServerInfoArray[ AGroup ][_EDIT_SERVER_INSTANCENAME] do 
    begin
     Parent   := APage.Surface;
     Top      := AYPos - ScaleY ( 2 );
     Width    := APage.SurfaceWidth div 3 - ScaleX ( 20 ) ;
     AYPos     := Top + Height + 10 ;
    end

  // porta ...
  ServerInfoArray[ AGroup ][_EDIT_SERVER_DATAPORT] := TEdit.Create(APage) ;
  with ServerInfoArray[ AGroup ][_EDIT_SERVER_DATAPORT] do 
    begin
     Parent    := APage.Surface ; 
     Top       := ServerInfoArray[AGroup][_EDIT_SERVER_INSTANCENAME].Top ;
     Left      := APage.SurfaceWidth div 3 ;
     Width     := APage.SurfaceWidth div 3 - ScaleX ( 20 ) ;
     Hint      := 'Informe a porta do servidor de dados';
     ShowHint  := True;
     MaxLength := 5 ;
     OnChange   := @ServerInfoEdit_Change ;
     OnKeyPress := @ServerPortEdit_KeyPress ;
    end


  ServerInfoArray[ AGroup ][_EDIT_SERVER_CONTROLLERPORT] := TEdit.Create(APage) ;
  with ServerInfoArray[ AGroup ][_EDIT_SERVER_CONTROLLERPORT] do 
    begin
     Parent    := APage.Surface; 
     Top       := ServerInfoArray[AGroup][_EDIT_SERVER_INSTANCENAME].Top ;
     Left      := APage.SurfaceWidth div 3 * 2 ;
     Width     := APage.SurfaceWidth div 3 - ScaleX ( 20 ) ;
     Hint      := 'Informe a porta do controlador';
     ShowHint  := True ;
     MaxLength := 5 ;
     OnChange   := @ServerInfoEdit_Change ;
     OnKeyPress := @ServerPortEdit_KeyPress ;
    end
   
end ;


// CreateMonoConfigPage = #AppName, Server, Data, Models
var
  MonoConfigPage: TInputDirWizardPage;

procedure MonoConfigPage_Activate( Sender : TWizardPage ) ;
begin

  if SelectedInstallType = OldSelectedInstallType then
    exit ;

  if Is64BitInstallMode then
    begin
     ServerInfoArray[ GROUP_SERVERINFO_CLIENTPAGE ][_EDIT_SERVER_INSTANCENAME  ].Text := GetPreviousData ( '{#PREV_FBServiceName}', '{#DEF_FBServiceName64}' ) ;
     ServerInfoArray[ GROUP_SERVERINFO_CLIENTPAGE ][_EDIT_SERVER_DATAPORT      ].Text := GetPreviousData ( '{#PREV_FBPort}',        '{#DEF_FBPort64}'        ) ;
     ServerInfoArray[ GROUP_SERVERINFO_CLIENTPAGE ][_EDIT_SERVER_CONTROLLERPORT].Text := GetPreviousData ( '{#PREV_FBController}',  '{#DEF_FBController64}' ) ;
    end
  else
    begin
     ServerInfoArray[ GROUP_SERVERINFO_CLIENTPAGE ][_EDIT_SERVER_INSTANCENAME  ].Text := GetPreviousData ( '{#PREV_FBServiceName}', '{#DEF_FBServiceName32}' ) ;
     ServerInfoArray[ GROUP_SERVERINFO_CLIENTPAGE ][_EDIT_SERVER_DATAPORT      ].Text := GetPreviousData ( '{#PREV_FBPort}',        '{#DEF_FBPort32}'        ) ;
     ServerInfoArray[ GROUP_SERVERINFO_CLIENTPAGE ][_EDIT_SERVER_CONTROLLERPORT].Text := GetPreviousData ( '{#PREV_FBController}',  '{#DEF_FBController32}' ) ;
    end
end ;

procedure CreateMonoConfigPage ( AAfterPageID : integer )  ;
var 
 YPos : integer ; 
begin
  MonoConfigPage := CreateInputDirPage( AAfterPageID,
    'Selecione o local de destino', 'Onde os módulos do {#AppName} {#AppVersion} devem ser instalados ?',
    'O programa de instalação irá instalar o {#AppName} {#AppVersion} nas pastas a seguir. Clique em avançar para continuar.Se deseja escolher uma pasta diferente, clique em procurar.',
    False, '');


  AddDirToDirPage ( MonoConfigPage, '{#AppName}', '{#FolderApp}' ) ;
  YPos := MonoConfigPage.PromptLabels[0].Top + ScaleY ( 10 ) ;
  ReAlign ( MonoConfigPage, 0, YPos, 20 ) ;

  // models folder
  AddDirToDirPage ( MonoConfigPage, 'Modelos', '{#FolderModels}' ) ; 
  ReAlign ( MonoConfigPage, 1, YPos, 20 ) ;

  // server path
  AddDirToDirPage ( MonoConfigPage, 'Servidor', '{#FolderServer}' ) ;
  ReAlign ( MonoConfigPage, 2, YPos, 5 ) ;
  // server info
  CreateInfoServer ( MonoConfigPage, GROUP_SERVERINFO_CLIENTPAGE, YPos ) ;
  YPos := YPos + ScaleY ( 15 ) ; 
    
  // data folder
  AddDirToDirPage ( MonoConfigPage, 'Dados', '{#FolderData}' ) ;
  ReAlign ( MonoConfigPage, 3, YPos, 20 ) ;

  MonoConfigPage.OnActivate := @MonoConfigPage_Activate ;

end ;

var
  StationConfigPage: TInputDirWizardPage;
  StationCfgFileEdit : TEdit ;
  StationServerInfoLabel : TLabel ;   
  SationComboBoxDefaulIP : TNewComboBox ;
  
  StationCfg : record
    ServerName : string ;
    IP : string ;
    Port : string ;
    ControllerPort : string ;
    DataFolder : string ;
  end ;

procedure StationConfigPageNextButtonEnabled ;
begin
  with WizardForm.NextButton do
    begin
      Enabled := SationComboBoxDefaulIP.ItemIndex > -1 ;
    end ;
end ;

   
procedure EditStationConfig_Exit ( Sender : TObject ) ;
var
 CfgFileName : string ;
 ServerCfg : ansistring ;
 NamePosDelimiter, Port1PosDelimiter, Port2PosDelimiter, PathPosDelimiter : integer ;
begin
   CfgFileName := TEdit ( Sender ).Text ;
   StationServerInfoLabel.Caption := '' ;
   SationComboBoxDefaulIP.Items.Clear ;
   StationConfigPageNextButtonEnabled ;

   if not FileExists ( CfgFileName ) then
     exit ;
   
   if   (AnsiUpperCase ( ExtractFileName ( CfgFileName ) ) <> AnsiUpperCase ( '{#ServerConfigFile}' )) then
     begin
         MsgBox ( 'Arquivo de configuração invalido', mbError, MB_OK ) ;
         exit ;
     end 

   ServerCfg  := '' ;

   with TFileStream.Create ( CfgFileName, fmOpenRead ) do
   try
     //A=000.000.000.000/00000/00000|X:\X
     if ( Size < 34 ) or ( Size > 180 + 260 { MAXPATH } ) then
       exit ; 

     SetLength ( ServerCfg, Size ) ;
     ReadBuffer ( PAnsiChar ( ServerCfg ), Size ) ;

     NamePosDelimiter   := Pos ( '=', ServerCfg ) ;
     Port1PosDelimiter  := Pos ( '/', ServerCfg ) ;
     Port2PosDelimiter  := Pos ( '/', Copy ( ServerCfg, Port1PosDelimiter + 1, MaxInt )) ;
     PathPosDelimiter   := Pos ( '|', ServerCfg ) ;
   finally
     Free;
     if   ( ServerCfg = '' ) or (NamePosDelimiter=0) or (Port1PosDelimiter=0) or (Port2PosDelimiter=0) or (PathPosDelimiter=0) 
       or (Port1PosDelimiter=Port2PosDelimiter) or (PathPosDelimiter < Port2PosDelimiter) then
       MsgBox ( 'Arquivo de configuração invalido', mbError, MB_OK ) ;
   end ;

   StationServerInfoLabel.Caption := Copy ( ServerCfg, PathPosDelimiter + 1, MaxInt ) ;

   StationCfg.ServerName     := Copy ( ServerCfg, 1, NamePosDelimiter  - 1)  ;
   StationCfg.Port           := Copy ( ServerCfg, Port1PosDelimiter + 1, Port2PosDelimiter - 1  )  ;
   StationCfg.ControllerPort := Copy ( ServerCfg, Port1PosDelimiter + Port2PosDelimiter + 1, PathPosDelimiter - (Port1PosDelimiter + Port2PosDelimiter + 1)  )  ;
   StationCfg.DataFolder     := Copy ( ServerCfg, PathPosDelimiter + 1, MaxInt ) ; 

   SationComboBoxDefaulIP.Items.CommaText := Copy ( ServerCfg, NamePosDelimiter + 1, Port1PosDelimiter - NamePosDelimiter - 1) ;

   if SationComboBoxDefaulIP.Items.Count > 0 then
     SationComboBoxDefaulIP.ItemIndex := 0 ;

    if SationComboBoxDefaulIP.ItemIndex >= 0 then
       StationCfg.IP := SationComboBoxDefaulIP.Items[ SationComboBoxDefaulIP.ItemIndex ] ;

   StationConfigPageNextButtonEnabled ;

end ;   

procedure ButtonFindServerCfg_Click ( TSender : TObject ) ;
var
  Filename: String;
begin
  // Set the initial filename
  Filename := '{#ServerConfigFile}';
  if not GetOpenFileName('', Filename, '', '{#ServerConfigFile}|*.cfg', 'cfg') then
     exit ;
  StationCfgFileEdit.Text := '' ;
  StationCfgFileEdit.Text := Filename ;
  StationCfgFileEdit.OnExit ( StationCfgFileEdit ) ;
end ;

procedure StationConfigPage_Activate(Sender: TWizardPage);
begin
  StationConfigPageNextButtonEnabled ;
end ;


procedure CreateStationConfigPage ( AAfterPageID : integer )  ;
var 
 YPos : integer ; 
begin
  StationConfigPage := CreateInputDirPage( AAfterPageID,
    'Selecione o local de destino', 'Onde os módulos do {#AppName} {#AppVersion} devem ser instalados ?',
    'O programa de instalação irá instalar o {#AppName} {#AppVersion} nas pastas a seguir. Clique em avançar para continuar.Se deseja escolher uma pasta diferente, clique em procurar.',
    True, '{#AppPublisher}\{#InternalAppName}');

  StationConfigPage.OnActivate := @StationConfigPage_Activate ;
  // App Path
  AddDirToDirPage ( StationConfigPage, '{#AppName}', '{#FolderApp}' ) ;

  YPos := StationConfigPage.PromptLabels[0].Top + ScaleY ( 10 ) ;
  ReAlign ( StationConfigPage, 0, YPos, 20 ) ;

  // models folder
  AddDirToDirPage ( StationConfigPage, 'Modelos', '{#FolderModels}' ) ;
  ReAlign ( StationConfigPage, 1, YPos, 20 ) ;


  with TLabel.Create(StationConfigPage) do
    begin
      Parent   := StationConfigPage.Surface;  
      Top      := YPos;
      AutoSize := True ;
      WordWrap := True ;  
      Width    := StationConfigPage.SurfaceWidth ;
      Caption  := 'Informe o local do arquivo de configuração das estações ( {#ServerConfigFile} ) clicando em procurar.';
      YPos     := Top + Height + ScaleY ( 5 ) ;
    end ;

  StationCfgFileEdit := TEdit.Create(StationConfigPage) ;
  with StationCfgFileEdit do 
    begin
     Parent   := StationConfigPage.Surface;
     Top      := YPos - ScaleY ( 2 );
     Width    := StationConfigPage.Buttons[ 0 ].Left - ScaleX ( 10 ) ;
     OnExit   := @EditStationConfig_Exit ;
     TryEnableAutoCompleteFileSystem( StationCfgFileEdit.Handle )  ;
     //SendMessage(const Wnd: HWND; const Msg, WParam, LParam: Longint): Longint;
    end

  with TNewButton.Create(StationConfigPage) do 
    begin
     Parent    := StationConfigPage.Surface;
     Top       := YPos - ScaleY ( 4 );
     Left      := StationConfigPage.Buttons[ 0 ].Left    ;
     Width     := StationConfigPage.Buttons[ 0 ].Width   ;
     Height    := StationConfigPage.Buttons[ 0 ].Height  ;
     Caption   := StationConfigPage.Buttons[ 0 ].Caption ;
     OnClick   := @ButtonFindServerCfg_Click ; 
     YPos      := Top + Height - ScaleY ( 2 );
    end

      
  // memo ....

  StationServerInfoLabel := TLabel.Create ( StationConfigPage ) ;
  with StationServerInfoLabel do
  begin
     Parent   := StationConfigPage.Surface ;
     Color    := StationConfigPage.Surface.Color ;
     Top      := YPos ; 
     Width    := StationConfigPage.SurfaceWidth ;
     YPos     := Top + Height + ScaleY ( 5 ) ;
  end ;

  with TLabel.Create(StationConfigPage) do
    begin
      Parent   := StationConfigPage.Surface;  
      Top      := YPos;
      Width    := StationConfigPage.SurfaceWidth
      Caption  := 'Informe o IP padrão';
     // YPos     := Top + Height + ScaleY ( 5 ) ;
    end ;
  
  SationComboBoxDefaulIP := TNewComboBox.Create(StationConfigPage);  
  with SationComboBoxDefaulIP do
   begin
      Parent   := StationConfigPage.Surface;
      Style    := csDropDownList;  
      Top      := YPos - ScaleY ( 3 ) ;
      Left     := StationConfigPage.SurfaceWidth div 4 ;
      Width    := StationConfigPage.SurfaceWidth div 3 ;
   end 

end ;


var
  // Páginas customizadas que serão criadas
  ServerConfigPage : TInputDirWizardPage ; 
  YPos: Integer;
 

procedure ServerConfigPage_Activate ( Sender : TWizardPage ) ;
var
  IPList : TStringList ;
begin
  if SelectedInstallType = OldSelectedInstallType then
    exit ;

  if Is64BitInstallMode then
    begin
     ServerInfoArray[ GROUP_SERVERINFO_SERVERPAGE ][_EDIT_SERVER_INSTANCENAME  ].Text := GetPreviousData ( '{#PREV_FBServiceName}', '{#DEF_FBServiceName64}' ) ;
     ServerInfoArray[ GROUP_SERVERINFO_SERVERPAGE ][_EDIT_SERVER_DATAPORT      ].Text := GetPreviousData ( '{#PREV_FBPort}',        '{#DEF_FBPort64}'         ) ;
     ServerInfoArray[ GROUP_SERVERINFO_SERVERPAGE ][_EDIT_SERVER_CONTROLLERPORT].Text := GetPreviousData ( '{#PREV_FBController}',  '{#DEF_FBController64}' ) ;
    end
  else
    begin
     ServerInfoArray[ GROUP_SERVERINFO_SERVERPAGE ][_EDIT_SERVER_INSTANCENAME  ].Text := GetPreviousData ( '{#PREV_FBServiceName}', '{#DEF_FBServiceName32}' ) ;
     ServerInfoArray[ GROUP_SERVERINFO_SERVERPAGE ][_EDIT_SERVER_DATAPORT      ].Text := GetPreviousData ( '{#PREV_FBPort}',        '{#DEF_FBPort32}'        ) ;
     ServerInfoArray[ GROUP_SERVERINFO_SERVERPAGE ][_EDIT_SERVER_CONTROLLERPORT].Text := GetPreviousData ( '{#PREV_FBController}',  '{#DEF_FBController32}' ) ;
    end

  IPList := TStringList.Create ;
  GetIpAddresses( IPList, False ); 
  ServerConfigString :=  Format ( '%s=%s/', [ ExpandConstant('{computername}'), IPList.CommaText ] ) ; 
  IPList.Free ;
  UpdateServerConfigString ;

end ;


function ServerConfigPageNextButton_Click(Page: TWizardPage): Boolean;
var
  Path : string ;
begin       
  Path := AddBackSlash ( ServerConfigPage.Edits[ 2 ].Text ) ;
  Result := SaveStringToFile ( Path + '{#ServerConfigFile}', ServerConfigString + ServerConfigPage.Edits[1].Text, False ) ;
  if not Result then
    MsgBox ( 'Não foi possível salvar o arquivo de configurações.'#13#10'Verifique se possui diretos de gravação na pasta:'#13#10 + Path, mbError, MB_OK ) ;
end;

procedure CreateServerConfigPage ( AAfterPageID : integer ) ;
begin
  // Página Server
  // ServerConfigPage := CreateCustomPage( AAfterPageID, 'Configuração do módulo servidor', 'Servidor de rede');
  ServerConfigPage := CreateInputDirPage ( AAfterPageID,
    'Instalação do módulo servidor, controlador e pasta de dados', 'Onde o módulo servidor deve ser instalados ?',
    'Informe as configuraçoes do servidor de dados',
    False, '');
            
  // pasta do servidor ...
  AddDirToDirPage ( ServerConfigPage, 'Pasta de instalação', '{#FolderServer}' ) ;

  ServerConfigPage.PromptLabels[ 0 ].Width  := GetTextWidth ( 
     ServerConfigPage.PromptLabels[ 0 ].Caption, 
     ServerConfigPage.PromptLabels[ 0 ].Font.Name, 
     ServerConfigPage.PromptLabels[ 0 ].Font.Size ) ;

  ServerConfigPage.Edits  [ 0 ].Top   := ServerConfigPage.PromptLabels[ 0 ].Top - ScaleY ( 2 ) ;
  ServerConfigPage.Edits  [ 0 ].Left  := ServerConfigPage.PromptLabels[ 0 ].Left  + ServerConfigPage.PromptLabels[ 0 ].Width + ScaleX ( 10 ) ;
  ServerConfigPage.Edits  [ 0 ].Width := ServerConfigPage.Buttons[ 0 ].Left - ServerConfigPage.Edits [ 0 ].Left - ScaleX ( 10 )  ;
  ServerConfigPage.Buttons[ 0 ].Top   := ServerConfigPage.Edits[ 0 ].Top - ScaleX ( 2 )  ; ;
  YPos := ServerConfigPage.Edits[0].Top + ServerConfigPage.Edits[0].Height + ScaleY ( 8 ) ;

  CreateInfoServer ( ServerConfigPage, GROUP_SERVERINFO_SERVERPAGE, YPos ) ;

  // pasta base de dados ...
  AddDirToDirPage ( ServerConfigPage, 'Informe o local a base de dados será instalada', '{#FolderData}' ) ;
  with ServerConfigPage do 
    begin
      // label
      PromptLabels[ 1 ].Top    := YPos  ;  
      YPos                     := PromptLabels[ 1 ].Top + PromptLabels[ 1 ].Height + ScaleY ( 8 ) ;
      //edit 
      Edits   [ 1 ].Top        := YPos  -2 ;
      Buttons [ 1 ].Top        := Edits   [ 1 ].Top - ScaleY ( 2 ) ;
      YPos                     := Edits[ 1 ].Top + Edits[ 1 ].Height + ScaleY ( 8 ) ;
    end ;

  // pasta da configuração ...                                                   
  AddDirToDirPage ( ServerConfigPage, 'Informe o local onde o arquivo de configuração das estações ( {#ServerConfigFile} ) será salvo.', '{#FolderServerCfg}' ) ;
  with ServerConfigPage do 
    begin
      // label
      PromptLabels[ 2 ].Top    := YPos  ;  
      YPos                     := PromptLabels[ 2 ].Top + PromptLabels[ 2 ].Height + ScaleY ( 8 ) ;
      //edit 
      Edits   [ 2 ].Top        := YPos  -2 ;
      Buttons [ 2 ].Top        := Edits [ 2 ].Top - ScaleY ( 2 );
      YPos                     := Edits [ 2 ].Top + Edits[ 2 ].Height + ScaleY ( 8 ) ;
    end ;

  // memo ....
  ServerIntoLabel := TLabel.Create ( ServerConfigPage ) ;
  with ServerIntoLabel do
  begin
     Parent   := ServerConfigPage.Surface ;
     Color    := ServerConfigPage.Surface.Color ;
     Top      := YPos ; // InstallTypePage.CheckListBox.Top + InstallTypePage.CheckListBox.Height + 10 ; 
     Width    := ServerConfigPage.SurfaceWidth ;
  end ;
                                  
  ServerConfigPage.OnActivate := @ServerConfigPage_Activate ;
  ServerConfigPage.OnNextButtonClick  := @ServerConfigPageNextButton_Click ;

end;


function BoolToStr(Value : Boolean) : String; 
begin
  if Value then
    result := 'true'
  else
    result := 'false';
end;

var
  lblBlobFileFolder: TLabel;
  lblBlobFileWarning1: TLabel;
  lblBlobFileWarning2: TLabel;
  tbBlobFileFolder: TEdit;
  btnBlobFileFolder: TButton;

(*

function GetUserEnteredText(param: String): String;
begin
  Result := Trim(tbTextBox.Text);
end;

Root: HKLM; Subkey: SOFTWARE\MyCompany\MyTool; ValueType: string; ValueName: MyValue; ValueData: {code:GetUserEnteredText}; Flags: CreateValueIfDoesntExist UnInsDeleteKeyIfEmpty UnInsDeleteValue
*)


function GetBlobFolder(param: String): String;
begin
  Result := Trim(tbBlobFileFolder.Text);
end;


{ BlobFileForm_Activate }
procedure BlobFileForm_Activate(Page: TWizardPage);
var
  s: string;
begin
  s := Trim(tbBlobFileFolder.Text);
  if (s = '') then
  begin
    tbBlobFileFolder.Text := ExpandConstant('{sys}');
  end;
end;


{ BlobFileForm_NextButtonClick }
function BlobFileFormNextButton_Click(Page: TWizardPage): Boolean;
var
  s: string;
begin
  s := Trim(tbBlobFileFolder.Text);
  if (s = '') then
  begin
    MsgBox(ExpandConstant('{cm:BlobFileForm_NoFolder}'), mbError, MB_OK);
    Result := false;
  end else
  begin
    if not DirExists(s) then
    begin
      MsgBox(ExpandConstant('{cm:BlobFileForm_DirDoesntExist}'), mbError, MB_OK);
      Result := false;
    end else
    begin
      Result := True;
    end;
  end;
end;

procedure btnBlobFileFolder_Click(sender: TObject);
var
  directory: string;
begin
  if BrowseForFolder('', directory, true) then
  begin
    tbBlobFileFolder.Text := directory;
  end;
end;


{ BlobFileForm_CreatePage }
function BlobFileForm_CreatePage(PreviousPageId: Integer): Integer;
var
  Page: TWizardPage;
begin
  Page := CreateCustomPage(
    PreviousPageId,
    ExpandConstant('{cm:BlobFileForm_Caption}'),
    ExpandConstant('{cm:BlobFileForm_Description}')
  );

{ lblBlobFileFolder }
  lblBlobFileFolder := TLabel.Create(Page);
  with lblBlobFileFolder do
  begin
    Parent := Page.Surface;
    Caption := ExpandConstant('{cm:BlobFileForm_lblBlobFileFolder_Caption0}');
    Left := ScaleX(8);
    Top := ScaleY(8);
    Width := ScaleX(167);
    Height := ScaleY(13);
  end;

  { lblBlobFileWarning1 }
  lblBlobFileWarning1 := TLabel.Create(Page);
  with lblBlobFileWarning1 do
  begin
    Parent := Page.Surface;
    Caption := ExpandConstant('{cm:BlobFileForm_lblBlobFileWarning1_Caption0}');
    Left := ScaleX(8);
    Top := ScaleY(80);
    Width := ScaleX(50);
    Height := ScaleY(13);
    Font.Color := -16777208;
    Font.Height := ScaleY(-11);
    Font.Name := 'Tahoma';
    Font.Style := [fsBold];
  end;

  { lblBlobFileWarning2 }
  lblBlobFileWarning2 := TLabel.Create(Page);
  with lblBlobFileWarning2 do
  begin
    Parent := Page.Surface;
    Caption :=
      ExpandConstant('{cm:BlobFileForm_lblBlobFileWarning2_Caption0}') + #13 +
      ExpandConstant('{cm:BlobFileForm_lblBlobFileWarning2_Caption1}') + #13 +
      ExpandConstant('{cm:BlobFileForm_lblBlobFileWarning2_Caption2}') + #13 +
      ExpandConstant('{cm:BlobFileForm_lblBlobFileWarning2_Caption3}') + #13 +
      ExpandConstant('{cm:BlobFileForm_lblBlobFileWarning2_Caption4}');
    Left := ScaleX(8);
    Top := ScaleY(96);
    Width := ScaleX(399);
    Height := ScaleY(133);
    AutoSize := False;
    WordWrap := True;
  end;

  { tbBlobFileFolder }
  tbBlobFileFolder := TEdit.Create(Page);
  with tbBlobFileFolder do
  begin
    Parent := Page.Surface;
    Left := ScaleX(8);
    Top := ScaleY(24);
    Width := ScaleX(401);
    Height := ScaleY(21);
    TabOrder := 0;
  end;

  { btnBlobFileFolder }
  btnBlobFileFolder := TNewButton.Create(Page);
  with btnBlobFileFolder do
  begin
    Parent := Page.Surface;
    Caption := ExpandConstant('{cm:BlobFileForm_btnBlobFileFolder_Caption0}');
    Left := ScaleX(320);
    Top := ScaleY(48);
    Width := ScaleX(91);
    Height := ScaleY(23);
    TabOrder := 1;
  end;

  with Page do
  begin
    OnActivate := @BlobFileForm_Activate;
    OnNextButtonClick := @BlobFileFormNextButton_Click;
  end;

  with btnBlobFileFolder do
  begin
    OnClick := @btnBlobFileFolder_Click;
  end;

  Result := Page.ID;
end;


var
  ProgressPage: TOutputProgressWizardPage;
  
(*
  LightMsgPage := CreateOutputMsgPage(UsagePage.ID,
    'Personal Information', 'How will you use My Program?',
    'Note: to enjoy all features My Program can offer and to support its development, ' +
    'you can switch to sponsored or paid mode at any time by selecting ''Usage Mode'' ' +
    'in the ''Help'' menu of My Program after the installation has completed.'#13#13 +
    'Click Back if you want to change your usage mode setting now, or click Next to ' +
    'continue with the installation.');
 *)

procedure RaiseGetSelectedFolderInvalid ( AFolderType, AExpectedType : String ) ;
begin
   RaiseException ( Format ( 'GetSelectedFolder - type ''%s'' not compatible with ''%s'' option', [ AFolderType, AExpectedType ] ) )      
end ;     
                                                 
function GetSelectedFolder( AFolderType : String) : string ;
begin
  if AFolderType = 'AppendAppFolder' then
    begin
      Result := '{#AppPublisher}\{#InternalAppName}{#AppVersion}' ;
      exit ;
    end 

  // tudo na mesma pasta ....
  else if ( InstallType = itDemo ) then
    begin
     Result := AddBackSlash ( WizardForm.DirEdit.Text ) ; // '{#FolderApp}' 
     if      AFolderType = '{#FolderApp}'    then {do nothing}
     else if AFolderType = '{#FolderModels}' then Result := Result + 'Modelos\' 
     else if AFolderType = '{#FolderData}'   then Result := Result + 'Data\'
     else RaiseGetSelectedFolderInvalid ( AFolderType, 'Demo' )      

    end 
  else if ( RegistredInstallType = ritMonoUser ) then // App, Models, Server, Data
    begin 
     if      AFolderType = '{#FolderApp}'    then Result := MonoConfigPage.Values[0] 
     else if AFolderType = '{#FolderModels}' then Result := MonoConfigPage.Values[1] 
     else if AFolderType = '{#FolderServer}' then Result := MonoConfigPage.Values[2] 
     else if AFolderType = '{#FolderData}'   then Result := MonoConfigPage.Values[3]
     else RaiseGetSelectedFolderInvalid ( AFolderType, 'Mono' )      
    end
  else if ( RegistredInstallType = ritPortable ) then
    begin
     Result := AddBackSlash ( WizardForm.DirEdit.Text ) ; // '{#FolderApp}' 
     if      AFolderType = '{#FolderApp}'    then {do nothing}
     else if AFolderType = '{#FolderModels}' then Result := {--r1Result + 'Modelos\' ++r1 -->> } GetAppendedFolder ( GetDefaultFolder ( '{#FolderModels}' ), '{#FolderModels}' ) + 'Modelos\'
     else if AFolderType = '{#FolderData}'   then Result := {--r1Result + 'Data\' ++r1 -->> }    GetAppendedFolder ( GetDefaultFolder ( '{#FolderData}'  ),  '{#FolderData}'   ) + 'Data\'
     else RaiseGetSelectedFolderInvalid ( AFolderType, 'Demo' )      
    end 
  else if ( RegistredInstallType = ritStation ) then
    begin  // App:Station, Modelos, (server cfg), (default ip)
     if      AFolderType = '{#FolderApp}'    then Result := StationConfigPage.Values[0]
     else if AFolderType = '{#FolderModels}' then Result := StationConfigPage.Values[1] 
     else RaiseGetSelectedFolderInvalid ( AFolderType, 'Station' )      
    end 
  else if ( RegistredInstallType = ritServer ) then
    begin // App:Server, Data, path_cfg  
     if       AFolderType = '{#FolderServer}'    then Result := ServerConfigPage.Values[0] 
     else if  AFolderType = '{#FolderData}'      then Result := ServerConfigPage.Values[1]
     else if  AFolderType = '{#FolderServerCfg}' then Result := ServerConfigPage.Values[2] 
     else RaiseGetSelectedFolderInvalid ( AFolderType, 'Server' )      
    end ;
  Result := AddBackSlash ( Result ) ;
end ;


procedure WriteINIConfig ;
var
 IniFileName : string ;
begin


   if InstallType = itDemo then
     begin
      IniFileName := GetSelectedFolder( '{#FolderApp}' ) + 'CL.ini' ;
      SetIniString( 'DataServer', 'ServerName',     '', IniFileName ) ;
      SetIniString( 'DataServer', 'ServerAddress',  '', IniFileName ) ; 
      SetIniString( 'DataServer', 'ServerPort',     '', IniFileName ) ;
      SetIniString( 'DataServer', 'ControllerPort', '', IniFileName ) ;
      SetIniString( 'DataServer', 'DataFolder',     'Data', IniFileName ) ;
      SetIniString( 'TDBXFirebird250Driver', 'AutoUnloadDriver', 'False', IniFileName ) ;
     end 
   else 
    case RegistredInstallType of 
     ritMonoUser :
       begin                                          
        IniFileName := GetSelectedFolder( '{#FolderApp}' ) + 'CL.ini' ;
        SetIniString( 'DataServer', 'ServerName',     ExpandConstant('{computername}'), IniFileName ) ;
        SetIniString( 'DataServer', 'ServerAddress',  '127.0.0.1',                      IniFileName ) ; 
        SetIniString( 'DataServer', 'ServerPort',     ServerInfoArray[ GROUP_SERVERINFO_CLIENTPAGE ][_EDIT_SERVER_DATAPORT ].Text, IniFileName ) ;
        SetIniString( 'DataServer', 'ControllerPort', ServerInfoArray[ GROUP_SERVERINFO_CLIENTPAGE ][_EDIT_SERVER_CONTROLLERPORT].Text, IniFileName ) ;
        SetIniString( 'DataServer', 'DataFolder',     GetSelectedFolder( '{#FolderData}' ), IniFileName ) ;
        SetIniString( 'TDBXFirebird250Driver', 'AutoUnloadDriver', 'False', IniFileName ) ;
       end 
     ritPortable :
       begin
        IniFileName := GetSelectedFolder( '{#FolderApp}' ) + 'CL.ini' ;
        SetIniString( 'TDBXFirebird250Driver', 'AutoUnloadDriver', 'False', IniFileName ) ;
        if GetIniString( 'DataServer', 'DataFolder',     'Data', IniFileName ) = 'Data' then
          begin
           SetIniString( 'DataServer', 'ServerName',     '',     IniFileName ) ;
           SetIniString( 'DataServer', 'ServerAddress',  '',     IniFileName ) ; 
           SetIniString( 'DataServer', 'ServerPort',     '',     IniFileName ) ;
           SetIniString( 'DataServer', 'ControllerPort', '',     IniFileName ) ;
           //--r1SetIniString( 'DataServer', 'DataFolder',     'Data', IniFileName ) ;
           SetIniString( 'DataServer', 'DataFolder',     GetSelectedFolder( '{#FolderData}' ), IniFileName ) ;
          end
       end 
     ritStation :
       begin
        IniFileName := GetSelectedFolder( '{#FolderApp}' ) + 'CL.ini' ;
        SetIniString( 'DataServer', 'ServerName',     StationCfg.ServerName,     IniFileName ) ;
        SetIniString( 'DataServer', 'ServerAddress',  SationComboBoxDefaulIP.Items[ SationComboBoxDefaulIP.ItemIndex ] {StationCfg.IP},             IniFileName ) ; 
        SetIniString( 'DataServer', 'ServerPort',     StationCfg.Port,           IniFileName ) ;
        SetIniString( 'DataServer', 'ControllerPort', StationCfg.ControllerPort, IniFileName ) ;
        SetIniString( 'DataServer', 'DataFolder',     StationCfg.DataFolder,     IniFileName ) ;
        SetIniString( 'TDBXFirebird250Driver', 'AutoUnloadDriver', 'False', IniFileName ) ;
       end 
     ritServer :
       begin
        IniFileName := GetSelectedFolder( '{#FolderServer}' ) + '\RCtrl\CL.ini' ;
        SetIniString( 'DataServer', 'ServerName',     ExpandConstant('{computername}'), IniFileName ) ;
        SetIniString( 'DataServer', 'ServerAddress',  '127.0.0.1',                      IniFileName ) ; 
        SetIniString( 'DataServer', 'ServerPort',     ServerInfoArray[ GROUP_SERVERINFO_SERVERPAGE ][_EDIT_SERVER_DATAPORT ].Text, IniFileName ) ;
        SetIniString( 'DataServer', 'ControllerPort', ServerInfoArray[ GROUP_SERVERINFO_SERVERPAGE ][_EDIT_SERVER_CONTROLLERPORT].Text, IniFileName ) ;
        SetIniString( 'DataServer', 'DataFolder',     GetSelectedFolder( '{#FolderData}' ), IniFileName ) ;
        SetIniString( 'TDBXFirebird250Driver', 'AutoUnloadDriver', 'False', IniFileName ) ;
       end 
    end

end ;

procedure InitFarm  ;
var
  ExecResult : integer ;
  APath : string ;

begin
  if Trim ( RegisterCodeEdit.Text ) = '' then
    exit ;

  if    ( InstallType = itDemo ) 
     or (( InstallType = itRegistred )  and ((RegistredInstallType = ritMonoUser ) or (RegistredInstallType = ritPortable ))) then
    APath := GetSelectedFolder( '{#FolderApp}' )
  else   
    APath := GetSelectedFolder( '{#FolderServer}' ) + '\RCtrl\' ;
  
  Exec( APath + 'CL.Ag5.InitFarm.exe', // ExeName
           Format ( '%s %s %s -silent', [ RegisterCodeEdit.Text, AddQuotes ( WizardForm.UserInfoOrgEdit.Text ), ActivationKeyEdit.Text ] ), // parameters
           APath,              // working dir
           SW_SHOW,            // show mode
           ewWaitUntilTerminated,    // wait mode 
           ExecResult ) ;      // result

end ;



procedure InstallCOMP_Server ;
var
  InstanceName : string ;
  DataPort : integer ;
  ControllerPort : integer ;
begin
  if RegistredInstallType = ritServer then
    begin
      InstanceName   := ServerInfoArray[ GROUP_SERVERINFO_SERVERPAGE ][_EDIT_SERVER_INSTANCENAME   ].Text ;
      DataPort       := StrToIntDef ( ServerInfoArray[ GROUP_SERVERINFO_SERVERPAGE ][_EDIT_SERVER_DATAPORT       ].Text, -1 ) ;
      ControllerPort := StrToIntDef ( ServerInfoArray[ GROUP_SERVERINFO_SERVERPAGE ][_EDIT_SERVER_CONTROLLERPORT ].Text, -1 ) ;
    end 
  else
    begin
      InstanceName   := ServerInfoArray[ GROUP_SERVERINFO_CLIENTPAGE ][_EDIT_SERVER_INSTANCENAME   ].Text ;
      DataPort       := StrToIntDef ( ServerInfoArray[ GROUP_SERVERINFO_CLIENTPAGE ][_EDIT_SERVER_DATAPORT       ].Text, -1 ) ;
      ControllerPort := StrToIntDef ( ServerInfoArray[ GROUP_SERVERINFO_CLIENTPAGE ][_EDIT_SERVER_CONTROLLERPORT ].Text, -1 ) ;
    end 


   // InstallFirebirdSupperClassic  ( path, service name, port, start service, opon port ) 
   InstallFirebirdSupperClassic ( GetSelectedFolder( '{#FolderServer}' ), InstanceName, DataPort, True, RegistredInstallType <> ritMonoUser) ;
   if RegistredInstallType <> ritMonoUser then
      FirewallOpenPort ( InstanceName + '-Controller', ControllerPort, NET_FW_IP_PROTOCOL_TCP ) ;  

//#RemoteServicePort = 3050

end ;

(*
 *
 *  procedures/functions assigned to Inno Install Events   
 *
 *)

function OnInitializeSetup() : boolean  ;
begin
  Result := True ;
end ;

procedure OnInitializeWizard();
begin

  SelectedInstallType := -1 ;

  ProgressPage := CreateOutputProgressPage('Personal Information',
    'What''s your registration key?');

  //Fecha as aplicações
  TaskKill('Cl.Ag5.SendDataCDL.exe');
  TaskKill('Cl.Ag5.UpdateApplication.exe');

  // end sample pages ;

  CreatePublisherURLLink ;
  InitDefaultDirPage ;
//--R1  CreateInstallTypePage ( wpWelcome ) ;
//++R1 load preview install type ... ( initialized in CreateInstallTypePage )
  GetPreviousInstallType() ;
  InstallType          := itRegistred ;
  RegistredInstallType := ritPortable ;

  SelectType ( _VALUE_INSTALLTYPE_REGISTRED +  _VALUE_REGISTRED_INSTALLTYPE_PORTABLE ) ;
  InitEdits ;
//--R1  InitUserInfoPage ;
//--R1  CreateRegistredInstallTypePage ( wpUserInfo ) ;
//--R1  CreateMonoConfigPage ( wpSelectDir ) ;     
//--R1  CreateStationConfigPage ( MonoConfigPage.ID ) ;
//--R1  CreateServerConfigPage ( StationConfigPage.ID ) ;

  InitPreparingToInstall ;
 ;

  WizardForm.TypesCombo.Enabled := False ;
  
end;

procedure OnDeinitializeSetup();
begin
end ;

{
  // predefined wizard pages
  wpWelcome, wpLicense, wpPassword, wpInfoBefore, wpUserInfo, wpSelectDir, wpSelectComponents, 
  wpSelectProgramGroup, wpSelectTasks, wpReady, wpPreparing, wpInstalling, wpInfoAfter, wpFinished
}

function OnShouldSkipPage(PageID: Integer): Boolean;
begin  

  //if ( PageID = wpUserInfo ) then
  //   Result := (InstallType = itDemo)

  if PageID = wpLicense then
     Result := True ;

  if ( PageID = wpSelectDir ) then
     Result := (InstallType = itRegistred) and ( RegistredInstallType <> ritPortable )
//--r1  else if ( PageID = RegistredInstallTypePage.ID ) then
//--r1     Result := ( InstallType = itDemo ) 
//--r1  else if ( PageID = MonoConfigPage.ID ) then
//--r1     Result := ( InstallType = itDemo ) or ( RegistredInstallType <> ritMonoUser )
//--r1  else if ( PageID = StationConfigPage.ID ) then
//--r1 Result := ( InstallType = itDemo ) or ( RegistredInstallType <> ritStation )
//--r1  else if ( PageID = ServerConfigPage.ID ) then
//--r1 Result := ( InstallType = itDemo ) or ( RegistredInstallType <> ritServer ) 
  if PageID = wpSelectComponents then
     Result := True ;

  if PageID = wpSelectTasks then
     Result := True ;

end;

procedure OnCurPageChanged(CurPageID: Integer);
begin
 (*
     if CurPageID = wpLicense then
        WizardForm.LicenseAcceptedRadio.Enabled := False;
        WizardForm.LicenseNotAcceptedRadio.Enabled := False;

     if ScrollBar.Position = ScrollBar.Max then
        WizardForm.LicenseAcceptedRadio.Enabled := True;
        WizardForm.LicenseNotAcceptedRadio.Enabled := True;
 *)
end ;

procedure OnCurStepChanged_Install ;
begin
  // DoNothing ;
end ;

procedure OnCurStepChanged_PostInstall ;
var
  FBInstanceName : string ;              
begin

  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'fbsrun.dll',              False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'pdf.dll',                 False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'rtl210.bpl',              False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'rtl220.bpl',              False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'rtl230.bpl',              False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'rtl240.bpl',              False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'rtl250.bpl',              False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'tc.rtl210.bpl',              False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'tc.rtl220.bpl',              False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'tc.rtl230.bpl',              False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'tc.rtl240.bpl',              False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'tc.rtl250.bpl',              False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'cef.pak',                 False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'cef_100_percent.pak',     False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'cef_200_percent.pak',     False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'cef_extensions.pak',      False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'chrome_elf.dll',          False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'd3dcompiler_43.dll',      False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'd3dcompiler_47.dll',      False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'devtools_resources.pak',  False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'subprocess.exe',          False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'icudtl.dat',              False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'libcef.dll',              False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'libEGL.dll',              False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'libGLESv2.dll',           False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'natives_blob.bin',        False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'pepflashplayer.dll',      False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'snapshot_blob.bin',       False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'widevinecdmadapter.dll',  False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'ffmpegsumo.dll',          False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'wow_helper.exe',          False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'locales',                 True,  True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'guiclient.exe',           False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'flashplayer20_ha_install.exe',   False, True, False);
    
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.Utils.WB.bpl',               False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.WB.GerencialFinanceiro.bpl', False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.WB.GerencialZootecnico.bpl', False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.WB.ICG.bpl',                 False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.WB.Loja.bpl',                False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.WB.ManualFinanceiro.bpl',    False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.WB.ManualZootecnico.bpl',    False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.WB.Portal.bpl',              False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.WB.RPPA.bpl',                False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.Utils.WB2.bpl',              False, True, False);  
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.WB2.ICG.bpl',                False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.WB2.ManualFinanceiro.bpl',   False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.WB2.ManualZootecnico.bpl',   False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.WB2.Portal.bpl',             False, True, False);

  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'Tc.WindowsAPI240.bpl',             False, True, False);
                                                  
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.Client\CL.Ag5.Svc.Entidades.CadastroTipos.bpl', False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.Client\CL.Ag5.Client.DB.bpl',                   False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.Client\CL.Ag5.Client.DB.Session.bpl',           False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.Client\CL.Ag5.Client.DB.Entidades.bpl',         False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.Client\CL.Ag5.Client.DB.Zootecnico.bpl',        False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.Client\CL.Ag5.Client.DB.Finaceiro.bpl',         False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.Client\CL.Ag5.Client.DB.Anexos.bpl',            False, True, False);  
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.Client\Financeiro\CL.Ag5.Svc.NSMsgs.bpl',       False, True, False);  
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.Client\CL.Ag5.Svc.NSMsgs.bpl',       False, True, False);  
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.Svc.NSMsgs.bpl',       False, True, False);  
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CL.Ag5.bpl',       False, True, False);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + '*.Client.exe',    False, True, True );
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + '*.Client.bpl',    False, True, True );
  
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'Core',    True, True, True);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'CoreX',   True, True, True);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'Core200', True, True, True);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'Core210', True, True, True);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'Core220', True, True, True);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'Core230', True, True, True);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'Core240', True, True, True);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'Core250', True, True, True);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'EWB', True, True, True);

  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'FB\Win32', True, True, True);
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'FB\Win64', True, True, True);
  
  if Is64BitInstallMode then
    FBInstanceName := '{#DEF_FBServiceName64}'
  else 
    FBInstanceName := '{#DEF_FBServiceName32}'  ;


  //procedure InstallFirebirdSupperclassic ( APath : string ; AServiceName : string ; APort : integer ; AStartService : boolean ; AOpenPort : boolean  ) ;
  InstallFirebirdSupperclassic ( GetSelectedFolder( '{#FolderApp}' ) + 'FBS257\',
                FBInstanceName, 35255, True, False  ) ;


  if  ( IsComponentSelected( '{#COMP_Server32}' ) or IsComponentSelected( '{#COMP_Server64}' ))  then
     InstallCOMP_Server ;
        
  //if IsComponentSelected( '{#COMP_ClientApp}' ) then
  WriteINIConfig ;      

 //--r1 if ((Trim ( RegisterCodeEdit.Text ) <> '') and (RegistredInstallType <> ritStation)) then
 //--r1    InitFarm ;

end ;

procedure OnCurStepChanged_Done ;
var
 IniFileName : string ;
begin
  IniFileName := GetSelectedFolder( '{#FolderApp}' ) + 'CL.ini' ;
  SetIniString( 'App', 'Version',  '{#CurrentVersion}',  IniFileName ) ; 
end ;


procedure OnRegisterPreviousData(PreviousDataKey: Integer);
begin
  SetPreviousData( PreviousDataKey, '{#PREV_InstallType}', IntToStr ( SelectedInstallType ) ) ;

  if InstallType = itDemo then
    begin
      SetPreviousData( PreviousDataKey, '{#FolderApp}',    GetSelectedFolder( '{#FolderApp}'    ) ) ;    
    end
  else
    begin
       case RegistredInstallType of 
         ritMonoUser :
           begin
            SetPreviousData( PreviousDataKey, '{#FolderApp}',    GetSelectedFolder( '{#FolderApp}'    ) ) ;    
            SetPreviousData( PreviousDataKey, '{#FolderServer}', GetSelectedFolder( '{#FolderServer}' ) ) ;
            SetPreviousData( PreviousDataKey, '{#FolderData}',   GetSelectedFolder( '{#FolderData}'   ) ) ;
            SetPreviousData( PreviousDataKey, '{#FolderModels}', GetSelectedFolder( '{#FolderModels}' ) ) ;

            SetPreviousData( PreviousDataKey, '{#PREV_FBServiceName}', ServerInfoArray[ GROUP_SERVERINFO_CLIENTPAGE ][_EDIT_SERVER_INSTANCENAME   ].Text ) ;
            SetPreviousData( PreviousDataKey, '{#PREV_FBPort}',        ServerInfoArray[ GROUP_SERVERINFO_CLIENTPAGE ][_EDIT_SERVER_DATAPORT       ].Text ) ;
            SetPreviousData( PreviousDataKey, '{#PREV_FBController}',  ServerInfoArray[ GROUP_SERVERINFO_CLIENTPAGE ][_EDIT_SERVER_CONTROLLERPORT ].Text ) ;

           end 
         ritPortable :
           begin
            SetPreviousData( PreviousDataKey, '{#FolderApp}',    GetSelectedFolder( '{#FolderApp}'    ) ) ;    
           end 
         ritStation  :
           begin
            SetPreviousData( PreviousDataKey, '{#FolderApp}',    GetSelectedFolder( '{#FolderApp}'    ) ) ;    
            SetPreviousData( PreviousDataKey, '{#FolderModels}', GetSelectedFolder( '{#FolderModels}' ) ) ;
           end 
         ritServer   :
           begin
            SetPreviousData( PreviousDataKey, '{#FolderServer}',      GetSelectedFolder( '{#FolderServer}'    ) ) ;
            SetPreviousData( PreviousDataKey, '{#FolderData}',        GetSelectedFolder( '{#FolderData}'      ) ) ;
            SetPreviousData( PreviousDataKey, '{#FolderServerCfg}',   GetSelectedFolder( '{#FolderServerCfg}' ) ) ;

            SetPreviousData( PreviousDataKey, '{#PREV_FBServiceName}', ServerInfoArray[ GROUP_SERVERINFO_SERVERPAGE ][_EDIT_SERVER_INSTANCENAME   ].Text ) ;
            SetPreviousData( PreviousDataKey, '{#PREV_FBPort}',        ServerInfoArray[ GROUP_SERVERINFO_SERVERPAGE ][_EDIT_SERVER_DATAPORT       ].Text ) ;
            SetPreviousData( PreviousDataKey, '{#PREV_FBController}',  ServerInfoArray[ GROUP_SERVERINFO_SERVERPAGE ][_EDIT_SERVER_CONTROLLERPORT ].Text ) ;
           end 
       end
    end 

end ;

(*
 *
 *  procedures/functions assigned to Inno Uninstall Events   
 *
 *)

function OnInitializeUninstall(): Boolean;
begin
  // true = continue ; false = abort 
  Result := True ; 
end ;

procedure OnInitializeUninstallProgressForm();
begin
  // 
end ;

procedure OnDeinitializeUninstall();
begin
  //
end ;

procedure OnCurUninstallStepChanged_AppMutexCheck ;
begin
  //
end ;

procedure OnCurUninstallStepChanged_Uninstall ;
begin
  //
end ;

procedure OnCurUninstallStepChanged_PostUninstall ; 
begin
  //
end ;

procedure OnCurUninstallStepChanged_Done ;
begin
  //
end ;

function OnUninstallNeedRestart(): Boolean;
begin
  Result := False ;
end ;


(*
 *
 *  Inno Events   - Install 
 *
 *)

function InitializeSetup(): Boolean;
begin
  Result := OnInitializeSetup() ;
end ;

procedure InitializeWizard();
begin
  OnInitializeWizard();  
end;

procedure DeinitializeSetup();
begin
   OnDeinitializeSetup();
end  ;

procedure RegisterPreviousData(PreviousDataKey: Integer);
begin
  OnRegisterPreviousData ( PreviousDataKey );
end ;

function ShouldSkipPage(PageID: Integer): Boolean;
begin  
  Result := OnShouldSkipPage(PageID) ; 
end;

procedure CurPageChanged(CurPageID: Integer);
begin
  OnCurPageChanged(CurPageID );
end;

procedure CurStepChanged(CurStep: TSetupStep);
begin
	case CurStep of
		ssInstall     :  OnCurStepChanged_Install     ; { before copy } 
		ssPostInstall :  OnCurStepChanged_PostInstall ; { after copy/run }             
		ssDone        :  OnCurStepChanged_Done        ; { before click done/hide wizard form } 
	end;
end ;

(*
 *
 *  Inno Events   - Uninstall 
 *
 *)

function InitializeUninstall(): Boolean;
begin
  Result := OnInitializeUninstall
end ;

procedure InitializeUninstallProgressForm();
begin
  OnInitializeUninstallProgressForm
end ;

procedure DeinitializeUninstall();
begin
  OnDeinitializeUninstall
end ;

procedure CurUninstallStepChanged(CurUninstallStep: TUninstallStep);
begin 

  case CurUninstallStep of 
   usAppMutexCheck : OnCurUninstallStepChanged_AppMutexCheck ;
   usUninstall     : OnCurUninstallStepChanged_Uninstall ;
   usPostUninstall : OnCurUninstallStepChanged_PostUninstall ; 
   usDone          : OnCurUninstallStepChanged_Done ;
  end ;
                                             
end ;

function UninstallNeedRestart(): Boolean;
begin
  Result := OnUninstallNeedRestart ;
end ;

procedure StopFB ;
var
 FBInstanceName : string ;
begin

  if Is64BitInstallMode then
    FBInstanceName := '{#DEF_FBServiceName64}'
  else 
    FBInstanceName := '{#DEF_FBServiceName32}'  ;

  UnInstallFirebirdSupperclassic ( 
      GetSelectedFolder( '{#FolderApp}' ) + 'FBS255\',
      FBInstanceName ) ;
  DelTree( GetSelectedFolder( '{#FolderApp}' ) + 'FBS255\', True, True, True ) ;

  StopFirebirdSupperclassic ( 
      GetSelectedFolder( '{#FolderApp}' ) + 'FBS257\',
      FBInstanceName ) ;
end ;

procedure DeleteVirtualIni ;
var
  VirtualIniFile : string ;
  AppFolder : string ;
begin        
 AppFolder := GetSelectedFolder( '{#FolderApp}' ) ;             
 VirtualIniFile := AddBackSlash ( ExpandConstant ( '{localappdata}' ) )
                 + 'VirtualStore' 
                 + Copy ( AppFolder, 3, Length ( AppFolder ) ) 
                 + 'CL.INI';
 DelTree( VirtualIniFile, False, True, False ) ;
  
end ;

function PrepareToInstall(var NeedsRestart: Boolean): String;
begin
   Result := '' ;
   StopFB ;
   DeleteVirtualIni ;
end ;