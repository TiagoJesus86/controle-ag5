unit UDBAnexos.Update;

interface

uses
  UDBUpdate,
  Tc.VCL.Application ;

type

{$M+}
  TDBAnexosUpdate = class( TDBUpdate )
  published
    procedure _5_001_94;
    procedure _5_001_95;
    procedure _5_002_01;
  end;
{$M-}

implementation

Uses Tc.RTL.Exceptions, System.SysUtils,
    Data.DB, Tc.Data.DB.Helpers, DataSnap.DBClient, Tc.DataSnap.DBClient.Helpers,
    GuidSuppl, Tc.RTL.MD5 ;

{ TDBAnexosUpdate }

procedure TDBAnexosUpdate._5_002_01;
const

   _CREATE_OR_ALTER_PROCEDURE_SYS_ENDOFDAY =
          'CREATE OR ALTER PROCEDURE SYS$ENDOFDAY ('
   +#13#10'    ATIMESTAMP TIMESTAMP)'
   +#13#10'RETURNS ('
   +#13#10'    AENDOFDAYTIMESTAMP TIMESTAMP)'
   +#13#10'AS'
   +#13#10'BEGIN'
   +#13#10'  AENDOFDAYTIMESTAMP =  DATEADD(-1 MILLISECOND TO CAST(CAST(ATIMESTAMP AS DATE) + 1 AS TIMESTAMP));'
   +#13#10'  SUSPEND;'
   +#13#10'END' ;

   _CREATE_OR_ALTER_PROCEDURE_SYS_COMPARE_TIMESTAMP =
          'CREATE OR ALTER PROCEDURE SYS$COMPARE_TIMESTAMP ('
   +#13#10'    ATIMESTAMP1 TIMESTAMP,'
   +#13#10'    ATIMESTAMP2 TIMESTAMP)'
   +#13#10'RETURNS ('
   +#13#10'    RESULT INTEGER)'
   +#13#10'AS'
   +#13#10'BEGIN'
   +#13#10'    RESULT = 0;'
   +#13#10'    IF (DATEADD(-1 * EXTRACT(MILLISECOND FROM ATIMESTAMP1) MILLISECOND TO ATIMESTAMP1) ='
   +#13#10'        DATEADD(-1 * EXTRACT(MILLISECOND FROM ATIMESTAMP2) MILLISECOND TO ATIMESTAMP2)) THEN'
   +#13#10'      RESULT = 1;'
   +#13#10'    SUSPEND;'
   +#13#10'END' ;


   _CREATE_OR_ALTER_PROCEDURE_SYS_SPLIT =
          'CREATE OR ALTER PROCEDURE SYS$SPLIT('
   +#13#10'    SEPARATOR VARCHAR(10),'
   +#13#10'    ASTRING VARCHAR(8000))'
   +#13#10'RETURNS ('
   +#13#10'    STRINGITEM VARCHAR(1000))'
   +#13#10'AS'
   +#13#10'DECLARE VARIABLE STR VARCHAR(8000);'
   +#13#10'DECLARE VARIABLE POS INTEGER;'
   +#13#10'DECLARE VARIABLE SEPARATOR_LENGTH INTEGER;'
   +#13#10'BEGIN'
   +#13#10''
   +#13#10'  STR = ASTRING;'
   +#13#10'  SEPARATOR_LENGTH = CHAR_LENGTH(SEPARATOR);'
   +#13#10'  '
   +#13#10'  IF (SEPARATOR_LENGTH>0) THEN'
   +#13#10'  BEGIN'
   +#13#10'    POS = POSITION(SEPARATOR, STR);'
   +#13#10'  '
   +#13#10'    WHILE (POS <> 0) DO'
   +#13#10'    BEGIN'
   +#13#10'      IF (POS>1) THEN'
   +#13#10'      BEGIN'
   +#13#10'        STRINGITEM = SUBSTRING(STR FROM 1 FOR (POS-1));'
   +#13#10'        SUSPEND;'
   +#13#10'      END'
   +#13#10'      STR = SUBSTRING(STR FROM (POS+SEPARATOR_LENGTH) );'
   +#13#10'      POS = POSITION(SEPARATOR, STR);'
   +#13#10'    END'
   +#13#10'  END'
   +#13#10'  '
   +#13#10'  IF (CHAR_LENGTH(STR) >0 ) THEN'
   +#13#10'  BEGIN'
   +#13#10'    STRINGITEM = STR;'
   +#13#10'    SUSPEND;'
   +#13#10'  END'
   +#13#10''
   +#13#10'END' ;


   _CREATE_OR_ALTER_PROCEDURE_SYS_SPLIT_INTEGER_STRING =
          'CREATE OR ALTER PROCEDURE SYS$SPLIT_INTEGER_STRING ('
   +#13#10'    ASTRING VARCHAR(100))'
   +#13#10'RETURNS ('
   +#13#10'    N INTEGER,'
   +#13#10'    AN VARCHAR(100))'
   +#13#10'AS'
   +#13#10'DECLARE VARIABLE I INTEGER;'
   +#13#10'DECLARE VARIABLE TMP_N VARCHAR(100);'
   +#13#10'DECLARE VARIABLE C VARCHAR(1);'
   +#13#10'BEGIN'
   +#13#10'    I = 1;'
   +#13#10'    TMP_N = '''';'
   +#13#10'    N = 0;'
   +#13#10'    AN = '''';'
   +#13#10'    WHILE (I <= CHAR_LENGTH(ASTRING)) DO'
   +#13#10'    BEGIN'
   +#13#10'      C = SUBSTRING(ASTRING FROM I FOR 1);'
   +#13#10'      IF (C IN (''1'',''2'',''3'',''4'',''5'',''6'',''7'',''8'',''9'',''0'') AND (AN = '''')) THEN'
   +#13#10'        TMP_N = TMP_N || C;'
   +#13#10'      ELSE'
   +#13#10'        AN = AN || C;'
   +#13#10'      I = I + 1;'
   +#13#10'    END'
   +#13#10''
   +#13#10'    IF (TMP_N <> '''' ) THEN'
   +#13#10'    BEGIN'
   +#13#10'      N = CAST(TMP_N AS INTEGER);'
   +#13#10'    END'
   +#13#10'    SUSPEND;'
   +#13#10''
   +#13#10'END'  ;

   _CREATE_OR_ALTER_PROCEDURE_SYS_TIMESTAMP_TO_UNIX_TIMESTAMP =
          'CREATE OR ALTER PROCEDURE SYS$TIMESTAMP_TO_UNIX_TIMESTAMP ('
   +#13#10'    ATIMESTAMP TIMESTAMP)'
   +#13#10'RETURNS ('
   +#13#10'    UNIX_TIMESTAMP BIGINT)'
   +#13#10'AS'
   +#13#10'  DECLARE VARIABLE UNIX_OFFSET TIMESTAMP = ''1970-01-01 00:00:00'';'
   +#13#10'BEGIN'
   +#13#10'  IF ((ATIMESTAMP IS NOT NULL) AND (ATIMESTAMP >= UNIX_OFFSET)) THEN'
   +#13#10'    UNIX_TIMESTAMP = DATEDIFF(SECOND, :UNIX_OFFSET, :ATIMESTAMP) * 1000;'
   +#13#10'  ELSE'
   +#13#10'    UNIX_TIMESTAMP = 0;'
   +#13#10'  SUSPEND;'
   +#13#10'END' ;

   _CREATE_OR_ALTER_PROCEDURE_SYS_UNIX_TIMESTAMP_TO_TIMESTAMP =
          'CREATE OR ALTER PROCEDURE SYS$UNIX_TIMESTAMP_TO_TIMESTAMP ('
   +#13#10'    AUNIX_TIMESTAMP BIGINT)'
   +#13#10'RETURNS ('
   +#13#10'    ATIMESTAMP TIMESTAMP)'
   +#13#10'AS'
   +#13#10'  DECLARE VARIABLE UNIX_OFFSET TIMESTAMP = ''1970-01-01 00:00:00'';'
   +#13#10'BEGIN'
   +#13#10'  /* PROCEDURE SYS$TEXT */'
   +#13#10'  ATIMESTAMP = DATEADD(:AUNIX_TIMESTAMP / 1000 SECOND TO :UNIX_OFFSET);'
   +#13#10'  SUSPEND;'
   +#13#10'END' ;


   _CREATE_OR_ALTER_PROCEDURE_SYS_REPLACE_ITEM_IN_STRING =
          'CREATE OR ALTER PROCEDURE SYS$REPLACE_ITEM_IN_STRING ('
   +#13#10'    SEPARATOR VARCHAR(10),'
   +#13#10'    ASTRING VARCHAR(8000),'
   +#13#10'    AOLDVALUE VARCHAR(10),'
   +#13#10'    ANEWVALUE VARCHAR(10))'
   +#13#10'RETURNS ('
   +#13#10'    ARESULT VARCHAR(8000))'
   +#13#10'AS'
   +#13#10'DECLARE VARIABLE STR VARCHAR(8000);'
   +#13#10'DECLARE VARIABLE POS INTEGER;'
   +#13#10'DECLARE VARIABLE STRINGITEM VARCHAR(1000);'
   +#13#10'DECLARE VARIABLE SEPARATOR_LENGTH INTEGER;'
   +#13#10'BEGIN'
   +#13#10''
   +#13#10'  STR = ASTRING;'
   +#13#10'  SEPARATOR_LENGTH = CHAR_LENGTH(SEPARATOR);'
   +#13#10'  '
   +#13#10'  IF (SEPARATOR_LENGTH > 0) THEN'
   +#13#10'  BEGIN'
   +#13#10'    POS = POSITION(SEPARATOR, STR);'
   +#13#10'  '
   +#13#10'    WHILE (POS <> 0) DO'
   +#13#10'    BEGIN'
   +#13#10'      IF (POS > 1) THEN'
   +#13#10'      BEGIN'
   +#13#10'        STRINGITEM = SUBSTRING(STR FROM 1 FOR (POS-1));'
   +#13#10'        IF (STRINGITEM = :AOLDVALUE) THEN'
   +#13#10'          STRINGITEM = :ANEWVALUE;'
   +#13#10''
   +#13#10'        IF (:ARESULT IS NULL) THEN'
   +#13#10'          ARESULT = STRINGITEM;'
   +#13#10'        ELSE IF (:STRINGITEM IS NOT NULL) THEN'
   +#13#10'          ARESULT = ARESULT || SEPARATOR || STRINGITEM;'
   +#13#10''
   +#13#10'      END'
   +#13#10'      STR = SUBSTRING(STR FROM (POS+SEPARATOR_LENGTH) );'
   +#13#10'      POS = POSITION(SEPARATOR, STR);'
   +#13#10'    END'
   +#13#10'  END'
   +#13#10'  '
   +#13#10'  IF (CHAR_LENGTH(STR) > 0 ) THEN'
   +#13#10'  BEGIN'
   +#13#10'    STRINGITEM = STR;'
   +#13#10''
   +#13#10'    IF (STRINGITEM = :AOLDVALUE) THEN'
   +#13#10'      STRINGITEM = :ANEWVALUE;'
   +#13#10''
   +#13#10'    IF (:ARESULT IS NULL) THEN'
   +#13#10'      ARESULT = STRINGITEM;'
   +#13#10'    ELSE IF (:STRINGITEM IS NOT NULL) THEN'
   +#13#10'      ARESULT = ARESULT || SEPARATOR || STRINGITEM;'
   +#13#10''
   +#13#10'  END'
   +#13#10''
   +#13#10'  SUSPEND;'
   +#13#10''
   +#13#10'END' ;

begin
   ExecuteDirect ( _CREATE_OR_ALTER_PROCEDURE_SYS_ENDOFDAY                     ) ;
   ExecuteDirect ( _CREATE_OR_ALTER_PROCEDURE_SYS_COMPARE_TIMESTAMP            ) ;
   ExecuteDirect ( _CREATE_OR_ALTER_PROCEDURE_SYS_SPLIT                        ) ;
   ExecuteDirect ( _CREATE_OR_ALTER_PROCEDURE_SYS_SPLIT_INTEGER_STRING         ) ;
   ExecuteDirect ( _CREATE_OR_ALTER_PROCEDURE_SYS_TIMESTAMP_TO_UNIX_TIMESTAMP  ) ;
   ExecuteDirect ( _CREATE_OR_ALTER_PROCEDURE_SYS_UNIX_TIMESTAMP_TO_TIMESTAMP  ) ;
   ExecuteDirect ( _CREATE_OR_ALTER_PROCEDURE_SYS_REPLACE_ITEM_IN_STRING       ) ;
end ;


procedure TDBAnexosUpdate._5_001_95;
const
  _ALTER_TABLE_SYSVERSION_APPVERSION =
     'ALTER TABLE SYS$VERSION ADD SYS$APPVERSION SYS$INT';
begin
  TryExecuteDirect( _ALTER_TABLE_SYSVERSION_APPVERSION );
end;


procedure TDBAnexosUpdate._5_001_94;
const
  _CREATE_DOMAIN_ST_TYPE =
         'CREATE DOMAIN SYS$ST_TYPE AS'
  +#13#10'VARCHAR(31) CHARACTER SET ISO8859_1'
  +#13#10'NOT NULL'
  +#13#10'COLLATE ISO8859_1';

  _CREATE_DOMAIN_ST_TYPEID =
         'CREATE DOMAIN SYS$ST_TYPEID AS'
  +#13#10'VARCHAR(31) CHARACTER SET ISO8859_1'
  +#13#10'COLLATE ISO8859_1';

  _CREATE_DOMAIN_ST_VALUE =
         'CREATE DOMAIN SYS$ST_VALUE AS'
  +#13#10'VARCHAR(31) CHARACTER SET ISO8859_1'
  +#13#10'NOT NULL'
  +#13#10'COLLATE ISO8859_1';

  _CREATE_DOMAIN_ST_VALUE_NULL =
          'CREATE DOMAIN SYS$ST_VALUE_NULL AS'
  +#13#10'VARCHAR(31) CHARACTER SET ISO8859_1'
  +#13#10'COLLATE ISO8859_1';

  _CREATE_DOMAIN_ST_DESCRIPTION =
         'CREATE DOMAIN SYS$ST_DESCRIPTION AS'
  +#13#10'VARCHAR(255) CHARACTER SET ISO8859_1'
  +#13#10'NOT NULL'
  +#13#10'COLLATE ISO8859_1';

  _CREATE_DOMAIN_ST_ORDER =
         'CREATE DOMAIN SYS$ST_ORDER AS'
  +#13#10'SMALLINT'
  +#13#10'DEFAULT 0'
  +#13#10'NOT NULL';

  _CREATE_DOMAIN_ST_BOOL_NULL =
         'CREATE DOMAIN SYS$BOOL_NULL AS'
  +#13#10'CHAR(1) CHARACTER SET OCTETS'
  +#13#10'CHECK (VALUE IN ( NULL, ''T'', ''F'' ))'
  +#13#10'COLLATE OCTETS';

  _CREATE_DOMAIN_ST_BOOL =
         'CREATE DOMAIN SYS$BOOL AS'
  +#13#10'CHAR(1) CHARACTER SET OCTETS'
  +#13#10'DEFAULT ''F'''
  +#13#10'NOT NULL'
  +#13#10'CHECK (VALUE IN ( ''T'', ''F'' ))'
  +#13#10'COLLATE OCTETS';


  _CREATE_TABLE_SYS_TYPES =
         'CREATE TABLE SYS$TYPES ('
  +#13#10'     KSYS$TYPE        SYS$PKGUID20'
  +#13#10'    ,SYS$TYPE         SYS$ST_TYPE'
  +#13#10'    ,SYS$VALUE        SYS$ST_VALUE_NULL'
  +#13#10'    ,SYS$DESCRIPTION  SYS$ST_DESCRIPTION'
  +#13#10'    ,SYS$ORDER        SYS$ST_ORDER'
  +#13#10'    ,SYS$TYPEID       SYS$ST_TYPEID'
  +#13#10'    ,CONSTRAINT PKSYS$TYPES PRIMARY KEY (KSYS$TYPE)'
  +#13#10'    ,CONSTRAINT UQSYS$TYPES UNIQUE (SYS$TYPE, SYS$VALUE)'
  +#13#10')' ;

  _CREATE_OR_ALTER_PROCEDURE_SYS_TYPES_GETVALUE =
         'CREATE OR ALTER PROCEDURE SYS$TYPES_GETVALUE ('
  +#13#10'    SYS$TYPE TYPE OF SYS$ST_TYPE,'
  +#13#10'    SYS$TYPEID TYPE OF SYS$ST_TYPEID)'
  +#13#10'RETURNS ('
  +#13#10'    SYS$VALUE TYPE OF SYS$ST_VALUE_NULL)'
  +#13#10'AS'
  +#13#10'BEGIN'
  +#13#10''
  +#13#10'  SELECT SYS$VALUE'
  +#13#10'  FROM SYS$TYPES'
  +#13#10'  WHERE SYS$TYPE = :SYS$TYPE AND SYS$TYPEID = :SYS$TYPEID'
  +#13#10'  INTO :SYS$VALUE ;'
  +#13#10'  SUSPEND;'
  +#13#10''
  +#13#10'END' ;

  _CREATE_OR_ALTER_PROCEDURE_SYS_TYPES_GETDESCRIPTION =
         'CREATE OR ALTER PROCEDURE SYS$TYPES_GETDESCRIPTION ('
  +#13#10'    SYS$TYPE TYPE OF SYS$ST_TYPE,'
  +#13#10'    SYS$VALUE TYPE OF SYS$ST_VALUE_NULL)'
  +#13#10'RETURNS ('
  +#13#10'    SYS$DESCRIPTION TYPE OF SYS$ST_DESCRIPTION)'
  +#13#10'AS'
  +#13#10'BEGIN'
  +#13#10'  SELECT SYS$DESCRIPTION'
  +#13#10'  FROM SYS$TYPES'
  +#13#10'  WHERE SYS$TYPE = :SYS$TYPE AND SYS$VALUE = :SYS$VALUE'
  +#13#10'  INTO :SYS$DESCRIPTION ;'
  +#13#10'  SUSPEND;'
  +#13#10'END' ;


  _CREATE_TABLE_SYS_DOMAIN_TYPES =
         'CREATE TABLE SYS$DOMAIN_TYPES ('
  +#13#10'    KSYS$DOMAIN      SYS$PKGUID20'
  +#13#10'  , SYS$TYPE         SYS$ST_TYPE'
  +#13#10'  , SYS$VALUE        SYS$ST_VALUE_NULL'
  +#13#10'  , SYS$DESCRIPTION  SYS$ST_DESCRIPTION'
  +#13#10'  , SYS$ORDER        SYS$ST_ORDER'
  +#13#10'  , SYS$TYPEID       SYS$ST_TYPEID'
  +#13#10'  , CONSTRAINT UQSYS$DOMAIN_TYPES UNIQUE (KSYS$DOMAIN, SYS$TYPE, SYS$VALUE)'
  +#13#10')' ;

  _CREATE_OR_ALTER_PROCEDURE_SYS_DOMAIN_TYPES_GETVALUE =
         'CREATE OR ALTER PROCEDURE SYS$DOMAIN_TYPES_GETVALUE ('
  +#13#10'    KSYS$DOMAIN SYS$PKGUID20,'
  +#13#10'    SYS$TYPE TYPE OF SYS$ST_TYPE,'
  +#13#10'    SYS$TYPEID TYPE OF SYS$ST_TYPEID)'
  +#13#10'RETURNS ('
  +#13#10'    SYS$VALUE TYPE OF SYS$ST_VALUE_NULL)'
  +#13#10'AS'
  +#13#10'DECLARE EXISTS_ SYS$BOOL_NULL ;'
  +#13#10'BEGIN'
  +#13#10''
  +#13#10'  SELECT SYS$VALUE, ''T'''
  +#13#10'  FROM SYS$DOMAIN_TYPES'
  +#13#10'  WHERE KSYS$DOMAIN = :KSYS$DOMAIN AND SYS$TYPE = :SYS$TYPE AND SYS$TYPEID = :SYS$TYPEID'
  +#13#10'  INTO :SYS$VALUE, EXISTS_ ;'
  +#13#10''
  +#13#10'  IF ( EXISTS_ IS DISTINCT FROM ''T'' ) THEN'
  +#13#10'    EXECUTE PROCEDURE SYS$TYPES_GETVALUE ( SYS$TYPE, SYS$TYPEID ) RETURNING_VALUES SYS$VALUE ;'
  +#13#10''
  +#13#10'  SUSPEND;'
  +#13#10''
  +#13#10'END' ;

  _CREATE_OR_ALTER_PROCEDURE_SYS_DOMAIN_TYPES_GETDESCRIPTION =
         'CREATE OR ALTER PROCEDURE SYS$DOMAIN_TYPES_GETDESCRIPTION ('
  +#13#10'    SYS$DOMAIN TYPE OF SYS$ST_TYPE,'
  +#13#10'    SYS$TYPE TYPE OF SYS$ST_TYPE,'
  +#13#10'    SYS$VALUE TYPE OF SYS$ST_VALUE_NULL)'
  +#13#10'RETURNS ('
  +#13#10'    SYS$DESCRIPTION TYPE OF SYS$ST_DESCRIPTION)'
  +#13#10'AS'
  +#13#10'DECLARE VARIABLE EXISTS_  SYS$BOOL_NULL ;'
  +#13#10'BEGIN'
  +#13#10'  SELECT SYS$DESCRIPTION, ''T'''
  +#13#10'  FROM SYS$DOMAIN_TYPES'
  +#13#10'  WHERE KSYS$DOMAIN = :SYS$DOMAIN AND SYS$TYPE = :SYS$TYPE AND SYS$VALUE = :SYS$VALUE'
  +#13#10'  INTO SYS$DESCRIPTION, EXISTS_ ;'
  +#13#10''
  +#13#10'  IF ( EXISTS_ IS DISTINCT FROM ''T'' ) THEN'
  +#13#10'    EXECUTE PROCEDURE SYS$TYPES_GETDESCRIPTION( SYS$TYPE, SYS$VALUE ) RETURNING_VALUES SYS$DESCRIPTION ;'
  +#13#10''
  +#13#10'  SUSPEND;'
  +#13#10'END' ;

  _CREATE_OR_ALTER_PROCEDURE_SYS_REBUILD_STATISTICS =
          'CREATE OR ALTER PROCEDURE SYS$REBUILD_STATISTICS'
  +#13#10'AS'
  +#13#10'DECLARE VARIABLE S VARCHAR(200);'
  +#13#10'BEGIN'
  +#13#10'  FOR SELECT RDB$INDEX_NAME FROM RDB$INDICES INTO :S DO'
  +#13#10'  BEGIN'
  +#13#10'   S = ''SET STATISTICS INDEX '' || S || '';'' ;'
  +#13#10'   EXECUTE STATEMENT :s;'
  +#13#10'  END'
  +#13#10'  SUSPEND;'
  +#13#10'END' ;

   _CREATE_OR_ALTER_PROCEDURE_SYS_REPLICATE =
         'CREATE OR ALTER PROCEDURE SYS$REPLICATE ('
  +#13#10'    X_ INTEGER)'
  +#13#10'RETURNS ('
  +#13#10'    COUNT_ INTEGER)'
  +#13#10'AS'
  +#13#10'BEGIN'
  +#13#10'  COUNT_ = 0 ;'
  +#13#10'  WHILE ( COUNT_ < X_ ) DO'
  +#13#10'     BEGIN'
  +#13#10'        COUNT_ = COUNT_ + 1 ;'
  +#13#10'        SUSPEND ;'
  +#13#10'     END'
  +#13#10'END' ;

begin

  ExecuteDirect( _CREATE_DOMAIN_ST_TYPE );
  ExecuteDirect( _CREATE_DOMAIN_ST_TYPEID );
  ExecuteDirect( _CREATE_DOMAIN_ST_VALUE );
  ExecuteDirect( _CREATE_DOMAIN_ST_VALUE_NULL );
  ExecuteDirect( _CREATE_DOMAIN_ST_DESCRIPTION );
  ExecuteDirect( _CREATE_DOMAIN_ST_ORDER );
  ExecuteDirect( _CREATE_DOMAIN_ST_BOOL_NULL );
  ExecuteDirect( _CREATE_DOMAIN_ST_BOOL );

  {Try}ExecuteDirect( _CREATE_TABLE_SYS_TYPES ) ;
  ExecuteDirect( _CREATE_OR_ALTER_PROCEDURE_SYS_TYPES_GETVALUE ) ;
  ExecuteDirect( _CREATE_OR_ALTER_PROCEDURE_SYS_TYPES_GETDESCRIPTION ) ;


  TryExecuteDirect( _CREATE_TABLE_SYS_DOMAIN_TYPES ) ;
  ExecuteDirect( _CREATE_OR_ALTER_PROCEDURE_SYS_DOMAIN_TYPES_GETVALUE ) ;
  ExecuteDirect( _CREATE_OR_ALTER_PROCEDURE_SYS_DOMAIN_TYPES_GETDESCRIPTION ) ;

  ExecuteDirect( _CREATE_OR_ALTER_PROCEDURE_SYS_REBUILD_STATISTICS ) ;
  ExecuteDirect( _CREATE_OR_ALTER_PROCEDURE_SYS_REPLICATE ) ;
end;


end.
